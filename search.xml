<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JS 重点总结</title>
      <link href="/2025/09/17/js%E9%87%8D%E7%82%B9/"/>
      <url>/2025/09/17/js%E9%87%8D%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="数据结构有哪些"><a href="#数据结构有哪些" class="headerlink" title="数据结构有哪些?"></a>数据结构有哪些?</h3><p>数组，链表，栈，堆，队列，树，图</p><h4 id="js-中如何引入CSS？"><a href="#js-中如何引入CSS？" class="headerlink" title="js 中如何引入CSS？"></a>js 中如何引入CSS？</h4><p>link标签的 href 属性，import标签的 scr 属性</p><h4 id="Js-8大数据类型-？"><a href="#Js-8大数据类型-？" class="headerlink" title="Js 8大数据类型?？"></a>Js 8大数据类型?？</h4><p>数字，字符串，布尔值，大整型，undefined，null，symblo，object</p><h4 id="数组中常用的方法。尾部拼接数组的方法；数组转成字符串"><a href="#数组中常用的方法。尾部拼接数组的方法；数组转成字符串" class="headerlink" title="数组中常用的方法。尾部拼接数组的方法；数组转成字符串"></a>数组中常用的方法。尾部拼接数组的方法；数组转成字符串</h4><h4 id="对数组遍历的方法有哪几种"><a href="#对数组遍历的方法有哪几种" class="headerlink" title="对数组遍历的方法有哪几种?"></a>对数组遍历的方法有哪几种?</h4><p>for循环，forEach，filter，map，reduce，every，some，find，findIndex</p><h4 id="for-in-和-for-of-的区别-？"><a href="#for-in-和-for-of-的区别-？" class="headerlink" title="for in 和 for of 的区别?？"></a>for in 和 for of 的区别?？</h4><h4 id="和-的区别"><a href="#和-的区别" class="headerlink" title="&#x3D;&#x3D; 和 &#x3D;&#x3D;&#x3D; 的区别"></a>&#x3D;&#x3D; 和 &#x3D;&#x3D;&#x3D; 的区别</h4><h4 id="var-let-const-区别"><a href="#var-let-const-区别" class="headerlink" title="var let const 区别"></a>var let const 区别</h4>]]></content>
      
      
      <categories>
          
          <category> JavaScript 重点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 原生js </tag>
            
            <tag> 重点总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/09/17/js%E8%BF%9B%E9%98%B6/"/>
      <url>/2025/09/17/js%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>初解CSS</title>
      <link href="/2025/09/15/CSS/"/>
      <url>/2025/09/15/CSS/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS-层叠样式表"><a href="#CSS-层叠样式表" class="headerlink" title="CSS 层叠样式表"></a>CSS 层叠样式表</h2><p>写在 &lt; head &gt; 的 &lt; style &gt; 标签里面，为元素设置各种样式</p><h4 id="设置字体的样式"><a href="#设置字体的样式" class="headerlink" title="设置字体的样式"></a>设置字体的样式</h4><p><strong>font-family</strong> 设置字体类型<br><strong>font-size</strong> 设置字体大小<br><strong>color</strong> 设置字体颜色<br><strong>user-select: none;</strong> 禁用用户选择元素的内容</p><h4 id="其他常见属性"><a href="#其他常见属性" class="headerlink" title="其他常见属性"></a>其他常见属性</h4><ul><li><strong>width</strong>  <strong>height</strong> </li><li>满屏 width:100vw height:100vh</li><li>值需要计算的话，用 <strong>calc()</strong> 方法</li><li><strong>margin</strong> 外边框间隔 (上,右,下,左)<ul><li>top, right, bottom, left</li><li>margin: 0 auto; 居中</li></ul></li><li><strong>padding</strong> 内边框 (上,右,下,左)<ul><li>top, right, bottom, left</li></ul></li><li><strong>border</strong>  边框<ul><li>border：宽度, 类型, 颜色</li><li>颜色设置为 transparent 就是透明色</li></ul></li><li><strong>border-radius</strong> 边框圆角</li><li><strong>border-collapse</strong> 表格边框合并<ul><li>border-collapse:collapse 边框合并</li><li>border-collapse:separate 边框分离（默认）</li></ul></li><li><strong>background-color</strong> 设置背景颜色</li><li><strong>display</strong> 显示方式<ul><li>block</li><li>inline-block</li><li>flex</li><li>none 不显示元素，让元素达到隐藏的效果</li></ul></li><li><strong>text-align</strong> 文本对齐方式<ul><li>left; right; center; auto;</li></ul></li><li><strong>text-indent</strong> 文本首行缩进</li><li><strong>text-decoration</strong> 文本装饰<br>text-decoration-line<ul><li>line-through 中划线</li><li>underline 下划线</li><li>overline 上划线</li><li>none 去掉a标签的下划线<br>text-decoration-style</li><li>solid</li><li>double</li><li>dotted 点划线</li><li>dashed 短划线</li><li>wavy 波浪线</li></ul></li><li><strong>white-space:nowrap</strong> 禁止换行</li><li><strong>user-select:none</strong> 禁止用户选中</li><li><strong>cursor</strong>光标<ul><li>cursor:pointer 光标是小手的形状</li><li>cursor:wait 光标是沙漏的形状</li><li>cursor:help</li></ul></li><li><strong>overflow</strong> 元素溢出<ul><li>hidden 隐藏</li><li>scroll 滚动，浏览器总是显示滚动条</li></ul></li><li><strong>text-overflow</strong> 溢出文本显示<ul><li>ellipsis 省略号显示</li></ul></li><li><strong>list-style</strong><ul><li>none 取消ul的列表样式：不显示小圆点</li></ul></li><li><strong>position</strong> 位置<ul><li>给元素做了定位以后,他的父容器高度撑不起来了,需要给父容器单独设置高度</li><li>absolute 绝对位置</li><li>relative 相对位置</li><li>fixed 固定，元素的位置在屏幕滚动时不会发生改变</li></ul></li><li><strong>z-index</strong> 元素堆叠顺序：z轴的索引<ul><li>所有元素z-index默认都为0，值越大越在上面</li></ul></li><li><strong>opacity</strong> 设置元素的不透明度<ul><li>0(完全透明) - 1(不透明)</li></ul></li><li><strong>transition</strong>过渡<ul><li>transition:属性 延迟</li><li>transition: opacity 0.3s;</li></ul></li><li><strong>transform</strong><ul><li>translate 转换</li><li>rotate(值deg) 旋转</li><li>scale 缩放转换</li></ul></li><li><strong>transform-origin</strong><ul><li>用于改变被转换元素的起始位置，比如设置旋转时的旋转点</li></ul></li><li><strong>box-sizing</strong> 盒子模型-怪异模型<ul><li>border-box 呈现出指定的宽度和高度，把margin和padding放入盒子内部</li></ul></li><li><strong>box-shadow</strong> 添加一个或多个阴影效果<ul><li>box-shadow:((inset),x轴偏移，y轴偏移，模糊半径，扩散半径，颜色)</li><li>inset为可选项，不写inset默认阴影在边框外；使用inset会使阴影落在盒子内部</li></ul></li></ul><h3 id="文本显示2行，超出部分显示省略号"><a href="#文本显示2行，超出部分显示省略号" class="headerlink" title="文本显示2行，超出部分显示省略号"></a>文本显示2行，超出部分显示省略号</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">over-flow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token property">text-overflow</span><span class="token punctuation">:</span> elipsis<span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span><span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span><span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="弹性盒子"><a href="#弹性盒子" class="headerlink" title="弹性盒子"></a>弹性盒子</h3><h4 id="1-容器：写display-flex-的标签是容器"><a href="#1-容器：写display-flex-的标签是容器" class="headerlink" title="1.容器：写display:flex 的标签是容器"></a>1.容器：写display:flex 的标签是容器</h4><ul><li><strong>flex-direction</strong> 控制主轴方向是水平还是垂直<ul><li>row 水平，从左到右(默认)</li><li>column 垂直，从上到下</li><li>row-reverse 水平，从右到左</li><li>column-reverse 垂直，从下到上</li></ul></li><li><strong>flex-wrap</strong> 控制是否拥有多轴线(是否换行)<ul><li>nowrap 不换行(默认)</li><li>wrap 换行</li><li>wrap-reverse 换行，第一行在下面</li></ul></li><li><strong>flex-flow</strong> 上面两个的简写</li><li><strong>justify-content</strong> 项目在主轴上的排列方式<ul><li>flex-start</li><li>flex-end</li><li>center</li><li>space-between</li><li>space-around</li></ul></li><li><strong>align-items</strong> 项目在交叉轴方向的排列方式<ul><li>flex-start</li><li>flext-end</li><li>center</li></ul></li><li><strong>align-content</strong> 控制多根轴线的对齐方式<ul><li>flex-start  与交叉轴起点对齐</li><li>flext-end 与交叉轴终点对齐</li><li>center</li><li>space-between</li><li>space-around</li></ul></li></ul><h4 id="2-轴线：容器拥有轴线，轴线有方向，分主轴和交叉轴-默认水平是主轴，垂直是交叉轴"><a href="#2-轴线：容器拥有轴线，轴线有方向，分主轴和交叉轴-默认水平是主轴，垂直是交叉轴" class="headerlink" title="2.轴线：容器拥有轴线，轴线有方向，分主轴和交叉轴 默认水平是主轴，垂直是交叉轴"></a>2.轴线：容器拥有轴线，轴线有方向，分主轴和交叉轴 默认水平是主轴，垂直是交叉轴</h4><h4 id="3-项目：容器内的子级为项目"><a href="#3-项目：容器内的子级为项目" class="headerlink" title="3.项目：容器内的子级为项目"></a>3.项目：容器内的子级为项目</h4><ul><li><strong>order</strong> 项目的排列顺序<ul><li>默认是0 数值越小，排列越靠前</li></ul></li><li><strong>flex-grow</strong> 项目的放大比例，当只放大一个项目的话，相当于让该项目占容器的剩余空间<ul><li>0 不放大 （默认）</li><li>1 放大</li></ul></li><li><strong>flex-shrink</strong> 项目的缩小比例<ul><li>0 是不缩小</li><li>1 是缩小 （默认）</li></ul></li><li><strong>flex-basis</strong> </li><li><strong>flex</strong> 上面三个的简写</li><li><strong>align-self</strong> 交叉轴方向与其他项目不一样的对齐方式</li></ul><h2 id="CSS-类选择器"><a href="#CSS-类选择器" class="headerlink" title="CSS 类选择器"></a>CSS 类选择器</h2><h3 id="选择器的优先级"><a href="#选择器的优先级" class="headerlink" title="选择器的优先级"></a>选择器的优先级</h3><ul><li>标签 {} 优先级：1</li><li>.class{}   优先级：10</li><li>#ID{} 优先级：100</li><li>[type&#x3D;’xx’] 属性选择器，可以选择属性是xx的东西<br>使用 <strong>!important</strong> 可以提升优先级至最高</li></ul><h3 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.box li:first-child</span> <span class="token punctuation">&#123;</span>      <span class="token property">color</span><span class="token punctuation">:</span> blueviolet<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token selector">.box li:nth-child(2)</span> <span class="token punctuation">&#123;</span>      <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>:fist-child 选择列表中的第一项</li><li>:last-child 选择列表中的最后一项。</li><li>:nth-child(值) 选择指定索引的一项 <strong>下标从 1 开始</strong><ul><li>:nth-child(even)  even,选择偶数项</li><li>:nth-child(odd)  odd ,选择奇数项</li></ul></li><li>.class 标签。 后代选择器</li><li>.class &gt; 标签 子代选择器</li><li>.class + 标签 第一个兄弟选择器</li><li>.class ~ 标签 所有兄弟选择器</li></ul><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><h4 id="keyframes"><a href="#keyframes" class="headerlink" title="@keyframes"></a>@keyframes</h4><ul><li>@keyframes 动画名称</li></ul><h4 id="transition-过渡"><a href="#transition-过渡" class="headerlink" title="transition 过渡"></a>transition 过渡</h4><h3 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h3><ul><li>用于定义元素的特殊状态</li></ul><ol><li><strong>:hover</strong>  鼠标从元素滑过事件</li><li><strong>:focus</strong>  元素获得焦点事件</li><li><strong>:active</strong> 活动的元素</li><li><strong>:checked</strong> 被选中的&lt; input &gt;元素</li><li><strong>:link</strong> 未被访问的链接</li><li><strong>:visite</strong> 已被访问的链接</li></ol><h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><h3 id="伪元素-1"><a href="#伪元素-1" class="headerlink" title="伪元素"></a>伪元素</h3><p>设置伪元素，给元素清除浮动将元素的高度撑起来。给元素加 clearfix 类即可</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.clearfix:after,.clearfix:before</span> <span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.clearfix:after</span> <span class="token punctuation">&#123;</span>  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="初始清除边界"><a href="#初始清除边界" class="headerlink" title="初始清除边界"></a>初始清除边界</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span> <span class="token punctuation">&#123;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h3><ul><li>利用 @media screen and (max-width: 500px) {} 对页面原有样式进行覆盖。来实现页面布局的自适应<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>  <span class="token selector">.box</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初解HTML</title>
      <link href="/2025/09/15/HTML5/"/>
      <url>/2025/09/15/HTML5/</url>
      
        <content type="html"><![CDATA[<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><h4 id="常见的普通元素"><a href="#常见的普通元素" class="headerlink" title="常见的普通元素"></a>常见的普通元素</h4><ol><li>标题 标签</li></ol><ul><li>h1 - h6</li><li>每个页面只可以使用一个 h1 标签</li></ul><ol start="2"><li>&lt; div &gt; 标签 (块级容器block)</li><li>&lt; a &gt; 标签 锚元素(行内元素)</li></ol><ul><li>通过 href 属性设置超链接</li><li>target &#x3D; “_blank”浏览器会添加一个新窗口，打开此链接</li></ul><ol start="4"><li>&lt; link &gt; 链接标签</li></ol><ul><li>href 属性设置链接地址，常用于链接样式表<br>可输入多行文本，自动换行</li></ul><ol start="5"><li>&lt; span &gt; 标签 (行内元素)</li><li>&lt; p &gt; 标签 (块级元素)</li></ol><ul><li>段落标签</li><li>自动在段落的上下添加空行</li></ul><ol start="7"><li>&lt; strong &gt; 和 &lt; b &gt;</li></ol><ul><li>加粗文本，为了强调重要性，可设置字体颜色等。</li></ul><ol start="8"><li>&lt; em &gt; 和 &lt; i &gt;</li></ol><ul><li>倾斜</li></ul><ol start="9"><li>&lt; ins &gt; 和  &lt; u &gt;</li></ol><ul><li>加下划线</li></ul><ol start="10"><li>&lt; del &gt; 和  &lt; s &gt;</li></ol><ul><li>给文字加删除线</li></ul><ol start="11"><li>&lt; img &gt; 标签 (行内元素)</li></ol><ul><li>引入图像元素</li><li>src 属性是必须的，设置图像的路径</li><li>alt 属性：图像无法显示时，要显示的文字</li><li>title 属性：鼠标悬停在图像上时显示的文字</li></ul><ol start="12"><li>&lt; script &gt; 标签</li><li>&lt; i &gt; 标签</li></ol><ul><li>常用于字体图标 iconfont <strong>后面我会介绍如何引入阿里字体图标</strong></li></ul><h4 id="常见表单元素"><a href="#常见表单元素" class="headerlink" title="常见表单元素"></a>常见表单元素</h4><h4 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h4><p>HTML5 是 HTML 的新版本，它提供了很多新的标签，囊括了动画、视频和丰富的图形用户界面等。</p><h5 id="文档类型声明"><a href="#文档类型声明" class="headerlink" title="文档类型声明"></a>文档类型声明</h5><p>文档类型声明更简洁</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="新增语义化标签"><a href="#新增语义化标签" class="headerlink" title="新增语义化标签"></a>新增语义化标签</h5><ol><li>&lt; section &gt; 盒子</li><li>&lt; audio &gt; 标签</li></ol><ul><li>加入音频元素。支持.MP3 .WAV .OGG</li><li>src 设置音频文件的URL</li><li>controls 显示音频控件</li><li>loop 循环播放</li><li>muted 静音</li><li>autoplay 打开界面时自动播放音频</li></ul><ol start="3"><li>&lt; video &gt; 标签</li></ol><ul><li>加入视频元素。支持.MP4 .WebM .OGG</li><li>src 设置视频文件的URL</li><li>controls 显示视频控件</li><li>loop 循环播放</li><li>muted 静音</li><li>autoplay 打开界面时自动播放视频，前提是muted状态下</li></ul><ol start="4"><li>&lt; header &gt; 标签</li><li>&lt; main &gt; 标签</li><li>&lt; footer &gt; 标签</li></ol><h4 id="nav-标签-navigation"><a href="#nav-标签-navigation" class="headerlink" title="&lt; nav &gt; 标签(navigation)"></a>&lt; nav &gt; 标签(navigation)</h4><ul><li>导航标签</li></ul><h4 id="iframe-标签"><a href="#iframe-标签" class="headerlink" title="&lt; iframe &gt; 标签"></a>&lt; iframe &gt; 标签</h4><ul><li>内嵌框架</li></ul><h4 id="input-标签"><a href="#input-标签" class="headerlink" title="&lt; input &gt; 标签"></a>&lt; input &gt; 标签</h4><ul><li>vertical-align: middle;</li></ul><h4 id="label-标签"><a href="#label-标签" class="headerlink" title="&lt; label &gt; 标签"></a>&lt; label &gt; 标签</h4><p>标签，用于对某个元素的说明</p><ul><li>for 属性。和&lt; input &gt;搭配使用，给&lt; input &gt;设置id，for属性引用它的id可以进行同步控制</li></ul><h4 id="ul-li-⭐"><a href="#ul-li-⭐" class="headerlink" title="&lt; ul &gt; &lt; li &gt;⭐"></a>&lt; ul &gt; &lt; li &gt;⭐</h4><ul><li>无序列表</li><li>ul 里面只能包裹li 标签，想写标题套在li标签里</li></ul><h4 id="ol-li"><a href="#ol-li" class="headerlink" title="&lt; ol &gt; &lt; li &gt;"></a>&lt; ol &gt; &lt; li &gt;</h4><ul><li>有序列表</li><li>ul 里面只能包裹li 标签，想写标题套在li标签里</li></ul><h4 id="ol-li-1"><a href="#ol-li-1" class="headerlink" title="&lt; ol &gt; &lt; li &gt;"></a>&lt; ol &gt; &lt; li &gt;</h4><h4 id="table-表格"><a href="#table-表格" class="headerlink" title="&lt; table &gt; 表格"></a>&lt; table &gt; 表格</h4><ul><li>默认没有边框，大小会被内容自动撑开</li><li>边框合并border-collapse:collapse</li></ul><h4 id="thead-表格头部"><a href="#thead-表格头部" class="headerlink" title="&lt; thead &gt; 表格头部"></a>&lt; thead &gt; 表格头部</h4><h4 id="tbody-表格身体"><a href="#tbody-表格身体" class="headerlink" title="&lt; tbody &gt; 表格身体"></a>&lt; tbody &gt; 表格身体</h4><h4 id="tfoot-表格底部"><a href="#tfoot-表格底部" class="headerlink" title="&lt; tfoot &gt; 表格底部"></a>&lt; tfoot &gt; 表格底部</h4><h4 id="tr-th-td"><a href="#tr-th-td" class="headerlink" title="&lt; tr &gt; &lt; th &gt; &lt; td &gt;"></a>&lt; tr &gt; &lt; th &gt; &lt; td &gt;</h4><ul><li>创建表格</li><li>tr 行<ul><li>id 属性</li></ul></li><li>th 表格的表头 自动加粗、居中</li><li>td 每一行被分割成多个单元格</li></ul><h4 id="dl-dt-dd-定义列表"><a href="#dl-dt-dd-定义列表" class="headerlink" title="&lt; dl &gt; &lt; dt &gt; &lt; dd &gt; 定义列表"></a>&lt; dl &gt; &lt; dt &gt; &lt; dd &gt; 定义列表</h4><h4 id="article-标签"><a href="#article-标签" class="headerlink" title="&lt; article &gt; 标签"></a>&lt; article &gt; 标签</h4><h4 id="canvas-标签"><a href="#canvas-标签" class="headerlink" title="&lt; canvas &gt; 标签"></a>&lt; canvas &gt; 标签</h4><ul><li>帆布</li></ul><h4 id="pre-标签"><a href="#pre-标签" class="headerlink" title="&lt; pre &gt; 标签"></a>&lt; pre &gt; 标签</h4><ul><li>按照原文件中的内容原样显示(空格和换行符都会显示出来)</li></ul><h4 id="progress-标签"><a href="#progress-标签" class="headerlink" title="&lt; progress &gt; 标签"></a>&lt; progress &gt; 标签</h4><ul><li>进度条显示</li></ul><h4 id="attr-标签-缩写"><a href="#attr-标签-缩写" class="headerlink" title="&lt; attr &gt; 标签 缩写"></a>&lt; attr &gt; 标签 缩写</h4><ul><li>表示一个英文单词的缩写词</li></ul><h4 id="address-标签-地址"><a href="#address-标签-地址" class="headerlink" title="&lt; address &gt; 标签 地址"></a>&lt; address &gt; 标签 地址</h4><ul><li>联系人地址等信联系信息</li></ul><h4 id="cite-标签"><a href="#cite-标签" class="headerlink" title="&lt; cite &gt; 标签"></a>&lt; cite &gt; 标签</h4><ul><li>定义著作的标题</li></ul><h4 id="del-标签"><a href="#del-标签" class="headerlink" title="&lt; del &gt; 标签"></a>&lt; del &gt; 标签</h4><ul><li>为文本加删除线</li></ul><h4 id="br-标签"><a href="#br-标签" class="headerlink" title="&lt; br &gt; 标签"></a>&lt; br &gt; 标签</h4><ul><li>换行</li></ul><h4 id="hr-标签"><a href="#hr-标签" class="headerlink" title="&lt; hr &gt; 标签"></a>&lt; hr &gt; 标签</h4><ul><li>创建一条分割线</li></ul><h4 id="button-标签"><a href="#button-标签" class="headerlink" title="&lt; button &gt; 标签"></a>&lt; button &gt; 标签</h4><h4 id="textarea-标签-（文本域）"><a href="#textarea-标签-（文本域）" class="headerlink" title="&lt; textarea &gt; 标签 （文本域）"></a>&lt; textarea &gt; 标签 （文本域）</h4>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/09/15/jquery/"/>
      <url>/2025/09/15/jquery/</url>
      
        <content type="html"><![CDATA[<h2 id="jquery-选择器"><a href="#jquery-选择器" class="headerlink" title="jquery 选择器"></a>jquery 选择器</h2><p>学习前端的一个跳板，工作基本不用</p><ul><li>$(‘css选择器’)</li></ul><h3 id="juqery-事件"><a href="#juqery-事件" class="headerlink" title="juqery 事件"></a>juqery 事件</h3><ul><li>click(function(){}) 匿名函数<ul><li><strong>每次生成新界面的时候，要重新给按钮绑定click事件</strong></li></ul></li><li>focus(funnction(){}) 获得焦点</li><li>blur(function(){}) 失去焦点</li><li>hover(function(){}) 鼠标滑过</li><li>change(function(){}) 内容改变</li></ul><h3 id="jquery-方法"><a href="#jquery-方法" class="headerlink" title="jquery 方法"></a>jquery 方法</h3><h4 id="val"><a href="#val" class="headerlink" title="val()"></a>val()</h4><p>表单元素获取或修改值</p><h4 id="text"><a href="#text" class="headerlink" title="text()"></a>text()</h4><h4 id="attr"><a href="#attr" class="headerlink" title="attr()"></a>attr()</h4><p>获取某一元素的属性，并可以修改其属性值</p><h4 id="css-‘属性’-’要修改的值’"><a href="#css-‘属性’-’要修改的值’" class="headerlink" title="css(‘属性’,’要修改的值’)"></a>css(‘属性’,’要修改的值’)</h4><p>属性名用小驼峰的方式</p><h4 id="calc"><a href="#calc" class="headerlink" title="calc()"></a>calc()</h4><p>用于计算一些值，如居中时，left:calc(50% - 10px)</p><h4 id="index"><a href="#index" class="headerlink" title="index()"></a>index()</h4><p>获取到元素的索引</p><h4 id="animate"><a href="#animate" class="headerlink" title="animate()"></a>animate()</h4><p>创建自定义动画动画</p><ul><li>animate({params},speed)</li></ul><h4 id="empty"><a href="#empty" class="headerlink" title="empty()"></a>empty()</h4><ul><li>将元素内的内容清空，元素保留</li></ul><h4 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h4><ul><li>将元素移去，从页面中删除</li></ul><h4 id="closest"><a href="#closest" class="headerlink" title="closest()"></a>closest()</h4><h4 id="parent"><a href="#parent" class="headerlink" title="parent()"></a>parent()</h4><ul><li>找直接父元素</li></ul><h4 id="parents"><a href="#parents" class="headerlink" title="parents()"></a>parents()</h4><ul><li>找所有父元素</li></ul><h4 id="siblings"><a href="#siblings" class="headerlink" title="siblings()"></a>siblings()</h4><ul><li>找兄弟</li></ul><h4 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h4><h4 id="prop"><a href="#prop" class="headerlink" title="prop()"></a>prop()</h4><ul><li>多用于获取到复选框的checked属性的值</li><li>.prop(‘checked’)</li></ul><h4 id="addClass"><a href="#addClass" class="headerlink" title="addClass()"></a>addClass()</h4><h4 id="removeClass"><a href="#removeClass" class="headerlink" title="removeClass()"></a>removeClass()</h4><h4 id="trigger-事件名"><a href="#trigger-事件名" class="headerlink" title="trigger(事件名)"></a>trigger(事件名)</h4><ul><li>再次触发事件<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'this'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span>blur<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="html"><a href="#html" class="headerlink" title="html()"></a>html()</h4><ul><li>括号里面的值是字符串，用<code> </code></li><li>里面涉及到js变量的时候用${}，写在花括号里面</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/07/13/vue/"/>
      <url>/2025/07/13/vue/</url>
      
        <content type="html"><![CDATA[<h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><p>Vue 是一套用于构建用户界面的渐进式框架。可以自底向上逐层应用</p><h3 id="虚拟-dom"><a href="#虚拟-dom" class="headerlink" title="虚拟 dom"></a>虚拟 dom</h3><p>在内存中构建一个虚拟 DOM树，不会对真实的 DOM 进行操作</p><h3 id="spa-项目"><a href="#spa-项目" class="headerlink" title="spa 项目"></a>spa 项目</h3><p>单页面应用(Singl page application),把所有的活动局限于一个 web 页面。<br>App.vue 就是 index.html 的 body</p><h3 id="搭建-vue2-环境"><a href="#搭建-vue2-环境" class="headerlink" title="搭建 vue2 环境"></a>搭建 vue2 环境</h3><ul><li>安装官方的 cli 命令行 <code>npm i -g @vue/cli</code></li><li>执行 <code>vue create [项目名]</code> 选择 vue2 版本创建项目</li><li>进去项目文件，执行<code>npm run serve</code> 启动vue项目</li></ul><h3 id="vue2-项目文件"><a href="#vue2-项目文件" class="headerlink" title="vue2 项目文件"></a>vue2 项目文件</h3><ul><li>node_modules：npm模块，一般项目没有这个文件夹，但是有 package.json，可以执行<code>npm i</code>下载所有的包</li><li>public： 里面的 index.html 是模板 html，src 编译的时候按照它为模板进行编译，可以修改。public 中的东西不会进行编译。</li><li>src 项目的源码放在这里面。会对 scr 中的进行编译，编译后的文件带有<strong>哈希校验</strong><ul><li>assets 文件夹：设置一些公共样式或公共方法，写好之后需要在 main.js 中，用 <code>import &#39;路径&#39;</code> 引入</li></ul></li><li>.gitignore git的忽略文件，里面的东西在上传仓库的时候会被忽略</li><li>babel.config.js 编译配置</li><li>package.json<ul><li>serve 启动命令  <code>npm run serve</code></li><li>build 打包命令  <code>npm run build</code> 打包成 dist 文件夹，想自己测试得跑在服务器上执行<code>serve .</code></li></ul></li><li>package-lock.json</li><li>jsconfig.json</li><li>vue.config.js vue的配置文件：入口，出口等<ul><li><strong>productionSourceMap:true</strong>，将生产后的映射为编译之前的组件和行数</li></ul></li></ul><h3 id="vue2-基础语法"><a href="#vue2-基础语法" class="headerlink" title="vue2 基础语法"></a>vue2 基础语法</h3><h4 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h4><p>.vue 后缀的叫 Vue 组件，一个组件可以理解为一个页面<br>组件的组成</p><ul><li>&lt; template &gt;  html<br>只能有一个子级</li><li>&lt; script &gt;    js</li><li>&lt; style &gt;     css</li></ul><h4 id="组件的创建"><a href="#组件的创建" class="headerlink" title="组件的创建"></a>组件的创建</h4><p>在 src 文件夹下新建一个文件夹，在里面新建 .vue 文件。src 文件夹下是项目的源码 .vue 文件的文件名首字母大写，不能和 html 的标签重名</p><h4 id="vue-组件内的语法"><a href="#vue-组件内的语法" class="headerlink" title="vue 组件内的语法"></a>vue 组件内的语法</h4><p>html 部分不加 this，例如：<code>$slots</code>。<br>js 部分加 this,例如:<code>this.$slots</code>。<br>导出对象的属性</p><ul><li>name 属性<br>属性值是一个字符出。组件的名称标识，不要和 html 标签重名</li><li>components 属性<br>属性值是一个对象。组件注册：把组件声明成标签</li><li>props 属性</li><li>data() 方法<br>数据驱动视图，对视图进行渲染</li><li>methods 属性</li></ul><h4 id="组件嵌套使用"><a href="#组件嵌套使用" class="headerlink" title="组件嵌套使用"></a>组件嵌套使用</h4><ul><li>1.在子组件内写好东西，然后在导出对象里面最好写上 name 属性，它是组件的名称标识 与 .vue 的文件名同名</li><li>2.在父组件内用 <code>import 变量名 from &#39;路径&#39; </code></li><li>3.在父组件的默认导出对象内的 components 里写上，导入的组件名<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> HeaderView <span class="token keyword">from</span> <span class="token string">'./components/HeaderView.vue'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span> <span class="token operator">:</span> <span class="token string">"App"</span><span class="token punctuation">,</span>  <span class="token literal-property property">components</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>    HeaderView<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>4.在父组件的 template 中引用模块，直接写 &lt; HeaderView &#x2F;&gt;</li><li>2，3，4 可以简化。直接在父组件的 template 中 引用 &lt; HeaderView &#x2F;&gt;,下面会自动导入模块并将模块注册，自动补齐</li></ul><h4 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h4><p>在 template 中使用 js 的值的方式</p><ul><li>在开始和结束标签之间写 js 的值  —-&gt;  <code>&#123;&#123;&#125;&#125;</code> 语法实现<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>button<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> text <span class="token operator">||</span> <span class="token string">"默认按钮"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>在标签内的属性中写 js 的值   —-&gt;  <strong>v-bind:属性名</strong> 指令实现  可以省略v-bind 直接写 <strong>:属性名</strong><br>在标签内绑定事件  —-&gt; <strong>v-on：click</strong> 指令实现， 可以简写为 <strong>@click</strong></li></ul><h4 id="组件内-style-的-scoped-属性"><a href="#组件内-style-的-scoped-属性" class="headerlink" title="组件内 &lt; style &gt; 的 scoped 属性"></a>组件内 &lt; style &gt; 的 scoped 属性</h4><p>将样式私有化，会给组件内的所有直接显示的标签加上一个特殊的属性 data-v-xxxxxxx，并且给 style 的所有选择器都会加上该属性</p><ul><li>想要给其他组件的写了 scoped 的元素写样式 用 <strong>::v-deep</strong><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>style scoped<span class="token operator">></span><span class="token operator">:</span><span class="token operator">:</span>v<span class="token operator">-</span>deep main<span class="token operator">></span>ul<span class="token operator">></span>li<span class="token punctuation">&#123;</span>  <span class="token literal-property property">color</span><span class="token operator">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="组件的-data-方法"><a href="#组件的-data-方法" class="headerlink" title="组件的 data 方法"></a>组件的 data 方法</h4><p>数据驱动视图的变化。data 发生改变页面就会重新渲染<br>data 是对象的话，新增属性时，页面不会重新渲染<br>data 是数组的话，<code>数组[0] = 新的值</code>，这种修改也不会重新渲染</p><ul><li>1.定义 data()<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>2.把 data 写到 template 中，<strong>data 可以在 template 中使用模板语法直接用</strong><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span><span class="token operator">&lt;</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>num<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>3.在 methods 内声明方法修改 data，在 template 的标签里用 v-on 绑定事件</li><li><strong>在 js 内 使用 this.名称 访问或修改 data 的值</strong></li></ul><h4 id="组件的-props-属性"><a href="#组件的-props-属性" class="headerlink" title="组件的 props 属性"></a>组件的 props 属性</h4><p>通过 props 来传参定制组件。props 的变量可以在 template 中直接使用<br>当 props 的属性值是一个字符串数组，定义接收 props<br>对大小写不敏感，可以将 my-button 识别为 myButton 驼峰式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"MyButton"</span><span class="token punctuation">,</span>  <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">,</span><span class="token string">"textcolor"</span><span class="token punctuation">,</span><span class="token string">"shape"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当 props 的属性值是一个对象,给 props 定义详细规则</p><ul><li>type 设置参数类型</li><li>default 设置参数默认值</li><li>required:true 设置参数为必传的参</li><li>validator 自定义校验函数，他的参数是一个箭头函数<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token comment">// 规定类型     type:[String,Number],两者之一</span>      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">"默认按钮"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token comment">// 自定义校验函数</span>      <span class="token function-variable function">validator</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">"danger"</span><span class="token punctuation">,</span> <span class="token string">"success"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>将对象下的所有属性当作 props 传递，使用 v-bind&#x3D;”对象”,不能省略写法<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>my<span class="token operator">-</span>button v<span class="token operator">-</span>bind<span class="token operator">=</span><span class="token string">"btnOption"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">btnOption</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"danger"</span><span class="token punctuation">,</span>        <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">"删除按钮"</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>传入一个布尔值</li><li>没有值的话，意味着值为 true<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>my<span class="token operator">-</span>button round <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>my<span class="token operator">-</span>button <span class="token operator">:</span>round <span class="token operator">=</span> <span class="token string">"false"</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h4 id="组件的-methods-属性"><a href="#组件的-methods-属性" class="headerlink" title="组件的 methods 属性"></a>组件的 methods 属性</h4><ul><li>创建事件函数，在 export default 的 methods 属性下创建事件函数， methods 内的所有方法都可以当作事件函数</li><li>在标签内使用 <strong>v-on:</strong> 绑定事件 可以简写为 <strong>@</strong><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>button v<span class="token operator">-</span>on<span class="token operator">:</span>click<span class="token operator">=</span><span class="token string">"add"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"add"</span><span class="token operator">></span>  <span class="token comment">// 简写形式</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">num</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// methods 内的所有方法都可以当作函数</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>      <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="class-和-style-的绑定"><a href="#class-和-style-的绑定" class="headerlink" title="class 和 style 的绑定"></a>class 和 style 的绑定</h4><p>class 的绑定</p><ul><li>class 的值<strong>写成数组</strong><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>button v<span class="token operator">-</span>bind<span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"['btn', shape]"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>class 的值<strong>写成对象</strong><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>button v<span class="token operator">-</span>bind<span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"&#123;btn:true,[shape]:true&#125;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>终极写法: <strong>写成对象数组</strong><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>button v<span class="token operator">-</span>bind<span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"['btn',&#123;[shape]:true&#125;]"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>style 的绑定</li><li>style 的值写成对象<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>button v<span class="token operator">-</span>bind<span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">"&#123;color:textcolor&#125;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h4><p>v-show 和 v-if 都是条件化的渲染一块内容，控制这一块内容的出现和消失</p><ul><li>v-show </li><li>v-if</li><li>v-else-if</li><li>v-else<br>v-if v-else-if v-else必须挨着使用，中间不能有任何其他的东西。与 js 中 if else 的用法一致。值是布尔；有一个成立后面的就不会执行</li></ul><p>在 template 中使用 v-show 或 v-if<br>多个元素同时出现或消失</p><ul><li>使用 template 包裹，再用 v-show 或 v-if<br>注：complate 不能直接包裹 complate<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>多元素同时条件渲染<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>showP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>区别</p><ol><li>本质原理区别</li></ol><ul><li>v-show 相当于 style 的修改 display:none；v-if 相当于 dom 的出现消失，真正的销毁和重建</li></ul><ol start="2"><li>应用上 v-show 的切换效率高，但是初始渲染高，不管什么条件都会被渲染。v-if 相反</li></ol><h4 id="列表渲染-v-for"><a href="#列表渲染-v-for" class="headerlink" title="列表渲染 v-for"></a>列表渲染 v-for</h4><p>vue 要求 循环生成的标签 必须带上不同的 key 属性<br>循环JSON数据</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>列表渲染<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!-- 和数组的 forEach 类似，参数可以写item,index --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item, index) in newList<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        &#123;&#123; index + 1 + ":" + item.title &#125;&#125;      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>axio发请求拿到数据展示到页面上</p><ul><li>1.建一个数据库 .json 文件，并把它跑在服务器上 <code>json-server --watch -p 3008 vueHello.json</code></li><li>2.安装 axios 插件，执行<code>npm i axios</code></li><li>3.将 axios 导入到组件中<code>import axios from &#39;axios&#39;</code>–默认导入</li></ul><p>循环数字<br>从 1 开始</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>i in 5<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>i<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; i &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>循环对象<br>注意：第一个参数是 属性值value； 第二个参数是属性名key</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(value, key) in obj<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>key<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; key + ":" + value &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在 template 中使用 v-for</p><ul><li>key 要写到具体标签里面，不能写到 template 上<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(value, key) in obj<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>key + 1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; key &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>key + 2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; value &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h4><p>vue 中 this 指向，指向组件本身，必须指向组件本身</p><ul><li>methods 内的方法，必须用普通函数的写法，才可以使 this 指向组件</li><li>上面普通函数里面的函数必须使用箭头函数，才可以使 this 指向组件</li></ul><p>vue中事件对象</p><ul><li>当事件函数在 template 中绑定时，直接写名称使用，默认有一个事件对象 event 作为参数</li><li>当事件函数在 template 中绑定时，函数调用格式使用，要给函数传递一个 $event 作为事件对象<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleClick1(100, 200, $event)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p>事件内只是简单的运算操作，直接将操作语句写在事件内</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>count++<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>count--<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>export default &#123;  data() &#123;    return &#123;      count: 100,    &#125;;  &#125;,&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h5><p>v-on 指令的修饰符</p><ul><li>.prevent 阻止默认行为</li><li>.stop 阻止事件冒泡</li><li>.self 点的是当前元素自身时触发</li><li>.once 只触发一次</li></ul><h5 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h5><p>input 的事件有 </p><ul><li>focus</li><li>blur</li><li>input  在输入框内输入或删除就会触发</li><li>change 输入框失去焦点并且里面内容发生变化</li><li>keyup </li><li>keydown</li><li>keypress<br>keyup keydown keypress 才带按键修饰符</li><li>.enter 按下的键是回车键才触发事件<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">@keyup.enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleInput<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="表单输入绑定"><a href="#表单输入绑定" class="headerlink" title="表单输入绑定"></a>表单输入绑定</h4><p>v-model</p><ul><li>text 和 textarea 绑定的是 value 属性 和 input 事件</li><li>radio 和 checkbox 绑定的是 checked 属性 和 change 事件</li><li>select 绑定的是 value 属性 和 change 事件</li></ul><h5 id="表单输入绑定修饰符"><a href="#表单输入绑定修饰符" class="headerlink" title="表单输入绑定修饰符"></a>表单输入绑定修饰符</h5><ul><li>.number 用 parseFloat() 解析 转换数值，转换失败则返回原始值， 转成了NaN就是转换失败</li><li>.trim 去掉字符串左右空格</li><li>.lazy 将 input 事件改为 change 事件</li></ul><h4 id="计算属性-computed"><a href="#计算属性-computed" class="headerlink" title="计算属性 computed"></a>计算属性 computed</h4><ul><li>getter</li><li>setter 保证修改了视图的值，data 也要改<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">str</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 计算属性 有缓存，改之后和改之前是一样的东西，不会执行</span>  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 这种直接写其实就是 get() 方法</span>    <span class="token function">reverseStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>计算属性默认是不允许修改的。如果要修改计算属性需要在 computed 里加 setter<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">firstname</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      <span class="token literal-property property">lastname</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">fullName</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// getter</span>      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstname <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastname <span class="token operator">?</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastname <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token comment">// setter</span>      <span class="token comment">// newValue 是修改后的fullName的值</span>      <span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> splitText <span class="token operator">=</span> newValue<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>firstname <span class="token operator">=</span> splitText<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lastname <span class="token operator">=</span> splitText<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="侦听器-watch"><a href="#侦听器-watch" class="headerlink" title="侦听器 watch"></a>侦听器 watch</h4><p>当数据变化时执行异步语句的话用侦听器 watch。vue默认是被监听的data发生变化之后监听器才会执行，但可以设置 immediate:true 可以立即执行<br>有两种写法</p><ul><li>没其他参数 question(){}</li><li>有其他参数 question:{handler(newValue,oldValue){}}<ul><li>immediate:true 进入页面的时候直接执行侦听器</li><li>deep:true 当 question 是一个复杂对象类型（嵌套多层对象）当内部某个对象的属性发生变化或新增了属性时，侦听函数不会触发，设置deep:true 侦听器就可以侦听到这种变化。<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">question</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      <span class="token literal-property property">answer</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 写法1</span>    <span class="token comment">// question 发生变化下面的监听函数就执行</span>    <span class="token function">question</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oldValue<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 写法2</span>    <span class="token literal-property property">question</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// newValue 是新的值 oldValue 是之前的值</span>      <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oldValue<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>answer <span class="token operator">=</span> <span class="token string">"hahahahahahah"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">deep</span><span class="token operator">:</span><span class="token boolean">true</span>，      <span class="token literal-property property">immediate</span><span class="token operator">:</span><span class="token boolean">true</span>，<span class="token comment">// 进入页面的时候直接执行侦听</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>data 是对象的话，新增属性时，页面不会重新渲染<br>data 是数组的话，重新给某一项赋值的话，页面不会变化<br>解决办法</li></ul></li><li>直接重新赋值 data 对象</li><li>侦听器 deep:true</li><li>methods 属性内的方法 内置的 this.$set 方法修改值，可以被识别重新渲染<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>  <span class="token function">changeAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 对象 $set(哪个对象，'哪个属性'，改成什么)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">.</span>address<span class="token punctuation">,</span><span class="token string">'number'</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">)</span>    <span class="token comment">// 数组 $set(哪个数组，第几个，改成什么)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="this-refs"><a href="#this-refs" class="headerlink" title="this.$refs"></a>this.$refs</h4><p>vue 中获取真实 dom</p><ul><li>先给要获取的标签绑定 ref 属性，然后可以用 this.$refs.值获取。</li><li>如果标签是循环生成的话，会返回一个数组，通过下标访问<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>myRef<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="this-nextTick"><a href="#this-nextTick" class="headerlink" title="this.$nextTick()"></a>this.$nextTick()</h4><p>在刚修改完 data 之后直接获取真实 dom 会获取不到，因为修改完 data 之后会走 unpdated 生命周期钩子函数</p><ul><li>vue 提供了 this.$nextTick(()&#x3D;&gt;{})函数，它的参数是一个函数</li></ul><h4 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h4><p>this.$emit(“事件名”,参数值) 接收并自动调用函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>my<span class="token operator">-</span>button @myClick<span class="token operator">=</span><span class="token string">"edit"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">edit</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"edit"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"delete"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">handleFun</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> Function<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// this.$emit() 自定义参数</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"myClick"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在组件上绑定原生事件</p><ul><li>将原生事件绑定到组件的时候，需要用 .native 事件修饰符</li><li>这个事件会被直接绑定到组件的最外层元素上<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-button</span> <span class="token attr-name">@click.native</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>activeClick<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>子组件中修改父组件中 data 的方法<br>1.将父组件的 data 和 mothods 等传给子组件</p><h4 id="2-组件上的-v-model"><a href="#2-组件上的-v-model" class="headerlink" title="2.组件上的 v-model"></a>2.组件上的 v-model</h4><ul><li>v-model 简化了 :value&#x3D;”str” @input&#x3D;”fun”</li><li>fun 是赋值修改 str 的，fun(“新的值”)</li><li>父组件使用了 v-model 传递内容，子组件使用 model 修改简化的 prop 和 event 的名字，需要用 props 接参数<br>父组件：<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>count-child</span> <span class="token attr-name">:num</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>num<span class="token punctuation">"</span></span> <span class="token attr-name">@add</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span> <span class="token attr-name">@minus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>minus<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>str<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>子组件：<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>我是 CountChild 组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>展示父组件的 str :&#123;&#123; str &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-button</span>      <span class="token attr-name">text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>修改父组件的 str<span class="token punctuation">"</span></span>      <span class="token attr-name">@myClick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$emit('change', 'OOOOOOOOOOOOOOO')<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> MyButton <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 父组件使用了 v-model 传递内容</span>  <span class="token comment">// 子组件使用 model 修改传递的 prop 和 event 的名字</span>  <span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">prop</span><span class="token operator">:</span> <span class="token string">"str"</span><span class="token punctuation">,</span>    <span class="token literal-property property">event</span><span class="token operator">:</span> <span class="token string">"change"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"str"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="3-组件的-sync-修饰符-Vue3-中去除此功能"><a href="#3-组件的-sync-修饰符-Vue3-中去除此功能" class="headerlink" title="3.组件的 sync 修饰符 (Vue3 中去除此功能)"></a>3.组件的 sync 修饰符 (Vue3 中去除此功能)</h4><p>v-bind:x.sync&#x3D;”num”  简写 :变量名&#x3D;”num”<br>简化了 :value&#x3D;”num” @update:x ,绑定的变量是 update:变量名<br>父组件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>count-childOther</span> <span class="token attr-name">:x.sync</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>num<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>子组件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>my<span class="token operator">-</span>button text<span class="token operator">=</span><span class="token string">"父组件的 num + 1"</span> v<span class="token operator">-</span>on<span class="token operator">:</span>myClick<span class="token operator">=</span><span class="token string">"$emit("</span><span class="token literal-property property">update</span><span class="token operator">:</span>x<span class="token string">")"</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="插槽-slot"><a href="#插槽-slot" class="headerlink" title="插槽 slot"></a>插槽 slot</h4><p>插槽内容：引用插槽的组件必须使用双标签的形式，可以弄成插槽。传递插槽内 html 内容<br>插槽出口：用&lt; slot&#x2F; &gt; 标签接插槽的 html 内容<br>父组件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>Slot 插槽<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>border-demo</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>文章榜<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 具名插槽 v-slot:名字  简写 #名字 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>content</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in list<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; item.title &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>border-demo</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子组件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>border-wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>border-head<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>&#123;&#123; title &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>border-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- &lt;slot name="default" /> --></span>    <span class="token comment">&lt;!-- 具名插槽 接参方式 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具名插槽<br>用 template 标签包裹，用 v-slot:名字，给插槽命名。简写 #名字</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>content</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 不写 v-slot 其实就是默认 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>default</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment">&lt;!-- 默认接插槽 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>default<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>$slots</strong></p><ul><li>$slots 可以获取到所有传来的组件</li><li>html 部分用 $slots，js 部分用 this.$slots<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>作用域插槽<br>让父组件中的插槽内容能够访问子组件中的数据<br>子组件 一般都是 :row&#x3D;”data”<br>v-slot: 是传插槽名字；v-slot&#x3D; 是传作用域插槽<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>action<span class="token punctuation">"</span></span> <span class="token attr-name">:row</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>data<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>父组件 一般都是具名插槽&#x3D;”slotProps”</li><li>slotProps 是子组件内插槽传递的所有 prop 集合，是一个对象，该对象下存储了传递的所有内容<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope-slot-child</span> <span class="token attr-name">:tableData</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span> <span class="token attr-name">:tableColums</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tableColums<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- v-slot:action="slotProps" --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slotProps<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>del(slotProps.row)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope-slot-child</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h4><p>全局组件注册 Vue.component()</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> MyButton <span class="token keyword">from</span> <span class="token string">'./xxxxxxxx'</span><span class="token comment">// Vue.component("名称",组件名)</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"MyButton"</span><span class="token punctuation">,</span>Mybutton<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>自动化全局注册</p><ul><li>见 globalComponent.js 文件。需要用到lolash 插件。最后需要在 main.js 导入 globalComponent.js。<code>import from &#39;globalComponent.js&#39;</code></li></ul><h4 id="Vue-处理边界情况"><a href="#Vue-处理边界情况" class="headerlink" title="Vue 处理边界情况"></a>Vue 处理边界情况</h4><h5 id="访问元素和组件"><a href="#访问元素和组件" class="headerlink" title="访问元素和组件"></a>访问元素和组件</h5><p>访问元素</p><ol><li>ref 搭配 $regs 可以访问任意元素</li><li>事件对象 event.target 只能访问当前元素<br>访问组件</li><li>ref 搭配 $refs 父组件访问子组件</li><li>$parent 子组件访问父组件<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>vue 处理边界子组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- $parent 访问父组件 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>展示父组件的message: &#123;&#123; $parent.message &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>edage-child-child</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h5><p>用 provide 提供，它的所有后代都可以直接使用提供的参数； 用 inject 注入<br>provide 的写法 类似于 data 的写法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token function">provide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 提供的值是死的</span>    <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">,</span>    <span class="token comment">// 提供的 message 是响应式的，也就是实时变化的  需要写成函数，函数会实时执行</span>    <span class="token function-variable function">message</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>inject 的写法类似于 props 的数组形式写法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"message"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="循环引用-组件递归"><a href="#循环引用-组件递归" class="headerlink" title="循环引用-组件递归"></a>循环引用-组件递归</h4><p>组件递归，当前组件必须设置 name 属性<br>导航菜单用组件递归</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item, index) in menu<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &#123;&#123; item.label &#125;&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>menu-item</span>      <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.children &amp;&amp; item.children.length<span class="token punctuation">"</span></span>      <span class="token attr-name">:menu</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.children<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 组件递归必须设置 name 属性</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"MenuItem"</span><span class="token punctuation">,</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"menu"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="过滤器-filter（Vue3-中去除此用法）"><a href="#过滤器-filter（Vue3-中去除此用法）" class="headerlink" title="过滤器 filter（Vue3 中去除此用法）"></a>过滤器 filter（Vue3 中去除此用法）</h4><p>由于 computed 不能传参数。过滤器常用于数据格式化（日期格式化 数字格式化）<br>filters 的写法和 computed 的写法类似<br><code>&#123;&#123;过滤器第一个参数 | 过滤器(第二个参数) &#125;&#125;</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item, index) in list<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    price：&#123;&#123; item.price | filterPrice(2) &#125;&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">filters</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">filterPrice</span><span class="token punctuation">(</span><span class="token parameter">price<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> price<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>全局过滤器 Vue.filter()<br>写一个js文件，然后在 main.js 文件中导入即可</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span>Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'formatNUmber'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">number<span class="token punctuation">,</span> bit <span class="token operator">=</span> <span class="token number">2</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> value <span class="token operator">=</span> number <span class="token operator">*</span> <span class="token number">1</span>  <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span>bit<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h4><p>component 标签，is 属性来设置要切换的组件名。当组件多选一时比 v-if v-else 更简洁灵活</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span> <span class="token attr-name">include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PostsTab<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PostsTab<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="动态组件的缓存-keep-alive"><a href="#动态组件的缓存-keep-alive" class="headerlink" title="动态组件的缓存 keep-alive"></a>动态组件的缓存 keep-alive</h5><p>在 component 标签外面套一层 keep-alive 标签，那么里面的组件在切换的时候会被缓存，保持组件的状态。<br>keep-alive 可以传递的 props</p><ul><li>include 字符串或正则表达式。只有匹配的组件被缓存</li><li>exclude 字符串或正则表达式。除了匹配的组件不被缓存，其他的都缓存</li><li>max 数字。最多可以缓存组件的个数</li></ul><h4 id="自定义指令-directives"><a href="#自定义指令-directives" class="headerlink" title="自定义指令 directives"></a>自定义指令 directives</h4><p>directives 是一个对象，一般在 inserted 钩子函数中执行。inserted 是元素插入到父节点时自动执行的钩子函数<br>focus的参数 el：是元素本身  binding：是一个对象  binding.value; binding.expression<br>v-focus 指令案例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">directives</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">focus</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 元素插入到父节点时自动执行的钩子函数 inserted</span>      <span class="token function-variable function">inserted</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// el 是元素本身  binding 是一个对象</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>binding<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>binding<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token boolean">true</span> <span class="token operator">||</span> binding<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>全局自定义指令<br>参见 globalDirection.js 文件，然后在 main.js 中导入即可</p><h4 id="混入-mixins"><a href="#混入-mixins" class="headerlink" title="混入 mixins"></a>混入 mixins</h4><p>混入对象就类似于组件的js部分，把他单独写成一个js文件，然后在其他组件导入混入<br>参见 mixins.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> myMixin <span class="token keyword">from</span> <span class="token string">"./mixins"</span><span class="token punctuation">;</span>  <span class="token comment">// 导入文件</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">mixins</span><span class="token operator">:</span> <span class="token punctuation">[</span>myMixin<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Vue-的过渡和动画效果"><a href="#Vue-的过渡和动画效果" class="headerlink" title="Vue 的过渡和动画效果"></a>Vue 的过渡和动画效果</h4><h5 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h5><p>用 transition 标签包裹要过渡的元素，然后给 transition 标签设置 name 属性<br>在进入&#x2F;离开的过渡中，会有 6 个 class 切换。v 就是 transition 的 name</p><ul><li>v-enter 进入的开始</li><li>v-enter-active</li><li>v-enter-to 进入的结束，就是元素初始状态，一般不写</li><li>v-leave 消失的开始，就是元素初始状态，一般不写</li><li>v-leave-active 消失过程中，这个 class 可以做动画</li><li>v-leave-to 消失的结束<br>appear 属性：初始渲染的时候自动执行一次动画<br>mode 属性：设置切换模式，值多是 out-in</li><li>当 transition 内有多个元素的时候，需要给每一个元素加上不同的 key 属性</li></ul><h5 id="transition-group"><a href="#transition-group" class="headerlink" title="transition-group"></a>transition-group</h5><p>transition-group 会被渲染成标签，默认是 span 标签。可以用 tag 属性修改标签类型<br>key 属性不能和 index 有关系，不然会出一系列问题</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition-group</span> <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ul<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>move<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>i in list<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>i.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; i.num &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition-group</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="渲染函数-render"><a href="#渲染函数-render" class="headerlink" title="渲染函数 render"></a>渲染函数 render</h4><p>render 渲染函数，可以替代 template<br>vue 语法的 render</p><ul><li>render 默认接收 createElment 参数，用来创建 vnode。vnode：vue 中的标签</li><li>createElment 函数如何使用<br>createElment(‘标签名’，第二个参数，第三个参数)<ul><li>如果第二个参数是对象，那么第二个参数表示的是当前标签的属性，第三个参数表示当前标签的内容</li><li>如果第二个参数是数组，那么数组的项被依次当作标签的内容，没有第三个参数</li><li>如果第二个参数不是数组也不是对象，那么第二个参数就是标签的内容<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token literal-property property">require</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">level</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">createElment</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">createElment</span><span class="token punctuation">(</span><span class="token string">"h"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>level<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>jsx 语法的 render<br>在 html 内遇到 js，使用 {} 包裹<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> tag <span class="token operator">=</span> <span class="token string">'h'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>level<span class="token punctuation">;</span>  <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token string">'active'</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>tag <span class="token keyword">class</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>tag<span class="token operator">></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="CSS-预处理语言"><a href="#CSS-预处理语言" class="headerlink" title="CSS 预处理语言"></a>CSS 预处理语言</h4><p>主流语言有 less sass stylus</p><h5 id="node-安装-less"><a href="#node-安装-less" class="headerlink" title="node 安装 less"></a>node 安装 less</h5><p><code>npm i less -D</code><br><code>npm i less-loader -D</code></p><h5 id="less-语法使用"><a href="#less-语法使用" class="headerlink" title="less 语法使用"></a>less 语法使用</h5><p>在style标签内使用 lang&#x3D;”less” 指明用less语法对css进行解析。见 CssDemo.vue<br>1.嵌套<br>子级的样式可以直接嵌套在父级的花括号内</p><ul><li>&amp; 选择器表示父元素自己，&amp;:hover  &amp;:focus<pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">.css-demo</span> <span class="token punctuation">&#123;</span>  <span class="token selector">> h3</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// &amp; 选择器表示父元素元素本身</span>    <span class="token selector">&amp;:hover</span> <span class="token punctuation">&#123;</span>      <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">@color-black</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>2.变量</li><li>定义变量：@color:red;</li><li>使用变量：color:@color;<br>3.混入<br>混入的声明<pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">.baseTitle</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> serif<span class="token punctuation">;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>  <span class="token property">font-style</span><span class="token punctuation">:</span> italic<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">@color</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>混入的使用<pre class="line-numbers language-less" data-language="less"><code class="language-less">.<span class="token function">baseTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 相当于函数的调用，必须加分号</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>4.计算</li><li>可以直接对单位相同的数值进行运算，单位不同的用calc()<pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token property">width</span><span class="token punctuation">:</span>100px<span class="token operator">-</span>20px<span class="token property">width</span><span class="token punctuation">:</span><span class="token function">cacl</span><span class="token punctuation">(</span>100%<span class="token operator">-</span>20px<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>5.导入<br>手写一个 .less 文件，使用<code>@import &#39;路径&#39;</code></li></ul><h4 id="封装-axios-请求"><a href="#封装-axios-请求" class="headerlink" title="封装 axios 请求"></a>封装 axios 请求</h4><h4 id="封装-get"><a href="#封装-get" class="headerlink" title="封装 get"></a>封装 get</h4><h4 id="封装-post"><a href="#封装-post" class="headerlink" title="封装 post"></a>封装 post</h4><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><p>给 Vue 添加全局功能</p><ul><li>全局方法：this.$refs, this.$nextTick, this.$emit, this.$slots<br>在 main.js 中，设置 Vue 构造函数下的原型对象<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> http <span class="token keyword">from</span> <span class="token string">"./util/request"</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$http <span class="token operator">=</span> http<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h4 id="自我总结"><a href="#自我总结" class="headerlink" title="自我总结"></a>自我总结</h4><p>在 template 部分用 data 的时候不用写 this；在 script 部分用 data 的时候需要写 this.<br>在子组件引用父组件的自定义事件时，涉及到事件函数 event，子组件需要传递 $event 参数</p><h4 id="生命周期-lifeCycle"><a href="#生命周期-lifeCycle" class="headerlink" title="生命周期 lifeCycle"></a>生命周期 lifeCycle</h4><ul><li>1.初始渲染钩子函数<br>beforeCreate<br>created:处理 data,props<br>beforeMount<br>mounted</li><li>2.更新钩子函数<br>beforeUpdate<br>updated</li><li>3.销毁钩子函数<br>beforeDestroy<br>destroyed<br>mounted 和 create 之后才可以获取真实的 dom，进行 dom 操作</li></ul><p>组件嵌套的生命周期钩子函数执行顺序</p><ul><li>父组件created -&gt; 子组件created -&gt; 子组件mounted -&gt; 父组件mounted</li><li>哪个组件发生变化触发哪个组件的 updated</li><li>父子组件同时销毁的话：父组件 destroyed -&gt; 子组件 destroyed，父组件带动子组件销毁。子组件销毁：子组件 destroyed -&gt; 父组件 updated</li></ul><h4 id="Element-UI-的使用"><a href="#Element-UI-的使用" class="headerlink" title="Element-UI 的使用"></a>Element-UI 的使用</h4><ol><li>执行<code>npm i element-ui -S</code>安装elment-ui</li><li>执行<code>npm install babel-plugin-component -D</code>安装babel工具，按需自动导入</li><li>在 bable.config.js 中增加配置项<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token punctuation">[</span>    <span class="token string">"component"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"libraryName"</span><span class="token operator">:</span> <span class="token string">"element-ui"</span><span class="token punctuation">,</span>      <span class="token property">"styleLibraryName"</span><span class="token operator">:</span> <span class="token string">"theme-chalk"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>新建 plugins 文件夹，新建 elment.js 文件。在里面导入，然后注册全局组件<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Button <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Button<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>将 elment.js 导入到 main.js 中<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">'./plugins/element'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>如果要访问 Element-ui 中深层的样式，如果加了scoped，需要用 ::v-deep 来获取到深层的 data-v-xxxxx</p><h4 id="Vue-Router-路由"><a href="#Vue-Router-路由" class="headerlink" title="Vue Router 路由"></a>Vue Router 路由</h4><p>vue2 用3版本，vue3 用4版本</p><ul><li>安装<br>执行<code>npm i vue-router@3</code> vue2 安装 3版本，vue3 安装 4版本</li><li>导入<br>详情见router&#x2F;index.js<br>在 main.js 的 new Vue 中添加 router 项<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// router:router</span>  router<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>执行 <code>Vue.use(VueRouter);</code>之后，会自动创建 router-view, router-link 组件和 $router $route</p><ul><li>router-view 展示路由组件</li><li>router-link 跳转路由组件</li><li>$router 路由器整体</li><li>$route  当前路由</li></ul><h5 id="定义路由"><a href="#定义路由" class="headerlink" title="定义路由"></a>定义路由</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> IndexView<span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Home"</span><span class="token punctuation">,</span>    <span class="token comment">// 定义子路由：在 path 里面的 children 属性</span>    <span class="token comment">// 子路由的 path ，第一个 / 不用写</span>      <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'home/frontend'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> FrontEnd<span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'FrontEnd'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'home/backend'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> BackEnd<span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'BackEnd'</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> AboutView<span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"About"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 动态路由  多个地址用一个组件</span>  <span class="token comment">// 动态路由地址 :userId 动态路由参数</span>  <span class="token comment">// 任意的 /user/任意 都可以匹配</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/user/:userId'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> UserView<span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"User"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>router-link 的 props</p><ul><li>to 跳转到哪(地址)<ol><li>地址</li><li>对象的 path:地址    :to</li><li>对象的 name:路由的名称</li></ol><ul><li>当跳转的时候需要查询参数 ？部分<ol><li>直接写在地址上</li><li>对象类型的话 query:{a : 10}</li></ol></li></ul></li><li>replace 无历史跳转，不能回退到上一次访问的页面</li><li>tag 将 router-link 渲染成某种标签，默认是 a 标签</li><li>active-class 链接被激活时的 class 类名，默认值是 router-link-active，<strong>激活</strong>就是 to 的地址和页面匹配了，匹配规则：包含匹配</li><li>exact 匹配规则：精确匹配。</li></ul><h5 id="默认子路由"><a href="#默认子路由" class="headerlink" title="默认子路由"></a>默认子路由</h5><ol><li>默认子路由的 path 为空。</li><li>父路由的 nam e 取消，直接写给默认子路由</li></ol><h5 id="重定向-重命名"><a href="#重定向-重命名" class="headerlink" title="重定向&#x2F;重命名"></a>重定向&#x2F;重命名</h5><p>重定向 redirect</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> AboutView<span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"About"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 重定向</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span> <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">'/vipabout'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重命名 alias</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> AboutView<span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"About"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 重命名</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/vipabout'</span><span class="token punctuation">,</span> <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token string">'/about'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="全局路由前置守卫-beforeEach"><a href="#全局路由前置守卫-beforeEach" class="headerlink" title="全局路由前置守卫 beforeEach"></a>全局路由前置守卫 beforeEach</h5><p>导航守卫，为了在路由切换时守卫导航（导航：路由的改变）。<br>next()放行，必须要被调用一次</p><ul><li>是否登录的校验<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> isLogin <span class="token operator">=</span> <span class="token boolean">false</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>name <span class="token operator">!=</span> <span class="token string">'Login'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isLogin<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Login"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="路由独享守卫-beforeEnter"><a href="#路由独享守卫-beforeEnter" class="headerlink" title="路由独享守卫 beforeEnter"></a>路由独享守卫 beforeEnter</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>  <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/user/:userId'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> UserView<span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"User"</span><span class="token punctuation">,</span> <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// 路由独享守卫</span>  <span class="token function-variable function">beforeEnter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> <span class="token string">'进入了user页面'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">requiredAuth</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="路由元信息-meta"><a href="#路由元信息-meta" class="headerlink" title="路由元信息 meta"></a>路由元信息 meta</h5><p>一般给路由配置是否有进入权限。</p><ul><li>当 to 的地址指向的是子路由页面，那么取路由元信息要从 to.matched 里面取所有的 meta<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> isLogin <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">const</span> hasAuth <span class="token operator">=</span> <span class="token boolean">true</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>name <span class="token operator">!=</span> <span class="token string">'Login'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isLogin<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 当 to 的地址指向的是子路由页面，那么取路由元信息要从 to.matched 里面取所有的 meta</span>      <span class="token keyword">const</span> requiredAuth <span class="token operator">=</span> to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>requiredAuth      <span class="token keyword">if</span> <span class="token punctuation">(</span>requiredAuth <span class="token operator">&amp;&amp;</span> hasAuth<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>requiredAuth<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Home"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Login"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="404-NotFound-重定向"><a href="#404-NotFound-重定向" class="headerlink" title="404 NotFound 重定向"></a>404 NotFound 重定向</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'404'</span><span class="token punctuation">,</span>        <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/NotFound.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"notFound"</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'*'</span><span class="token punctuation">,</span>        <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">"404"</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="过渡动效"><a href="#过渡动效" class="headerlink" title="过渡动效"></a>过渡动效</h5><p>用 transition 包裹，然后给 .v-enter,active,t0 和 .v-leave,active,to写样式</p><h5 id="滚动行为-scrollbehavior"><a href="#滚动行为-scrollbehavior" class="headerlink" title="滚动行为 scrollbehavior"></a>滚动行为 scrollbehavior</h5><h5 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h5><p>动态加载</p><h3 id="VueX"><a href="#VueX" class="headerlink" title="VueX"></a>VueX</h3><p>为 Vue 程序开发的状态管理模式</p><h4 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h4><p>state</p><ul><li>相当于 data</li></ul><p>mutations</p><ul><li>相当于 methods</li></ul><ol><li>mutations 内不能写异步请求操作</li><li>mutations 中的函数只可以接收两个参数。第一个参数必须是 state，第二个是荷载 payload</li></ol><p>getters</p><ul><li>相当于 computed</li></ul><ol><li>getters 默认传两个参数 state 和 getters</li><li>想要计算属性传参，需要将 getters 的返回值写成一个带参数的箭头函数  <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>通过title获取price：&#123;&#123; getPriceByTitle("iphone").price &#125;&#125;元<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token function">getPriceByTitle</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> getters</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>getters<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">title</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>carts<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>title <span class="token operator">===</span> title<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>命名空间访问全局内容，getters可以传第三个参数 rootState 和第四个参数 rootGetters</li></ol><p>actions</p><ul><li>actions 和 mutations 对应。actions 内可以写异步操作，解决了 mutations 内不能写异步操作的问题。</li></ul><ol><li>actions 默认传两个参数。第一个是 context(上下文)，context 对象内包括 commit，getters，state 等；第二个是 values ，相当于 mutations 中的载荷</li><li>在 actions 内发请求拿数据，通过 context.commit 调用 mutations 的方法修改 state</li><li>actions 是异步的。当执行完 actions 之后就想立刻执行某任务，就要用组合actions，将actions的函数返回值返回一个Promise对象</li></ol><ul><li>不使用 mapActions 时，普通调用<code>this.$store.dispatch(&#39;DelCart)</code></li></ul><p>modules</p><ul><li>把一个模块写到一个模块.js 里，导出该模块文件，然后在 index.js 中引入。在 index.js 中 store 内添加 module 属性。需要注意：state 的书写方式。state的属性值为一个箭头函数，返回一个对象。</li><li>命名空间: 在模块内设置 namespaced : true<ul><li>引用方式<ol><li>模块中…mapActions需要加上<code>模块名/</code>。换名导入  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">getCarts</span><span class="token operator">:</span> <span class="token string">"cartsValue/getCarts"</span><span class="token punctuation">,</span>    <span class="token literal-property property">delCart</span><span class="token operator">:</span> <span class="token string">"cartsValue/delCart"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>在…mapState函数中传入两个参数，第一个参数是命名空间模块名，第二个参数正常取  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token string">"cartsValue"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"carts"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol></li></ul></li><li>命名空间模块内访问全局内容：getters 可以设置第三个参 rootState 和第四个参 rootGeeters</li><li>带命名空间的模块 全局注册actions。(类似于侦听器的写法)<ol><li>root : true</li><li>handler(){}<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> moduleCart <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">actions</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 命名空间模块全局注册actions <span class="token operator">--</span><span class="token operator">></span>  <span class="token literal-property property">delCart</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> values</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">const</span> currentId <span class="token operator">=</span> values<span class="token punctuation">.</span>id          <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">http://localhost:3008/carts/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>currentId<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>          context<span class="token punctuation">.</span>state<span class="token punctuation">.</span>carts <span class="token operator">=</span> context<span class="token punctuation">.</span>state<span class="token punctuation">.</span>carts<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>id <span class="token operator">!=</span> currentId<span class="token punctuation">)</span>          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ul><h4 id="表单处理"><a href="#表单处理" class="headerlink" title="表单处理"></a>表单处理</h4><p>vuex 表单绑定不能使用v-model，否则在修改数据时会抛出错误。需要分别给表单绑定 :value 和 @input 事件   </p><h4 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h4><p><code>import &#123;mapState&#125; from &#39;vuex&#39;</code></p><ol><li>mapState</li><li>mapMutations</li><li>mapGetters<br>用法：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h4 id="导出下载excel-⭐"><a href="#导出下载excel-⭐" class="headerlink" title="导出下载excel (⭐)"></a>导出下载excel (⭐)</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> exportExcel <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../api/hrs'</span><span class="token keyword">const</span> <span class="token function-variable function">exportFun</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> filename</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">exportExcel</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 将请求结果转换为 Blob 对象，创建URL</span>  <span class="token keyword">const</span> objectUrl <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 创建 a 标签</span>  <span class="token keyword">const</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 将创建好的 url 写到 a 标签的 href 属性中</span>  link<span class="token punctuation">.</span>href <span class="token operator">=</span> objectUrl<span class="token punctuation">;</span>  <span class="token comment">// 设置下载的文件名</span>  link<span class="token punctuation">.</span>download <span class="token operator">=</span> filename<span class="token punctuation">;</span>  <span class="token comment">// 触发 a 标签的点击事件，执行下载</span>  link<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 清理URL缓存</span>  window<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">revokeObjectURL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 删除 a 标签</span>  link<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> exportFun<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>request.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 导出 Form Data post</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">$exportPost</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> instance<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string-property property">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">responseType</span><span class="token operator">:</span> <span class="token string">'blob'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h3><p>template 标签中可以写多个同级的子级<br>script 标签中加 setup 参数，说明vue3的语法是组合式API, 否则是选项式(vue2 的语法)。vue3 的最初版本是 setup 方法，后来更新了一个版本就可以在标签是直接绑定 setup</p><h4 id="创建-vue3-项目"><a href="#创建-vue3-项目" class="headerlink" title="创建 vue3 项目"></a>创建 vue3 项目</h4><ol><li><code>npm create vue@latest</code>，然后需要给项目设置一些参数</li><li><code>npm i</code> 装包，包括 vite</li><li><code>npm run dev</code></li></ol><h4 id="各个文件介绍"><a href="#各个文件介绍" class="headerlink" title="各个文件介绍"></a>各个文件介绍</h4><ul><li>index.html 从 public 中弄出来了</li><li>assets 存放静态资源<ul><li>base.css 中 :root 是在css 根中创建了一些变量。使用: var(变量名)</li></ul></li></ul><h4 id="响应式基础"><a href="#响应式基础" class="headerlink" title="响应式基础"></a>响应式基础</h4><p>需要在 js 部分从 vue 引入 ref 或者 reactive<br><code>import &#123; ref, reactive&#125; from &#39;vue&#39;</code><br>ref 响应式</p><ul><li>ref(值) 会自动创建一个包含 value 属性的对象。在 js 中通过 .value 来访问值或修改值，在 template 中可以直接使用变量名展示<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>&#123;&#123; msg &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changeMsg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改 msg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'hello vue3'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">changeMsg</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  msg<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'react'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>reactive 响应式</p><ul><li>reactive(值) reactive 的值必须是一个对象<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>&#123;&#123; countReactive.count &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> countReactive <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">count</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">const</span> userReactive <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'校长'</span><span class="token punctuation">,</span>    <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token string">'北京'</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// userReactive 不允许对 userReactive 本身重新赋值</span>userReactive <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'校长222'</span><span class="token punctuation">,</span>    <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token string">'北京222'</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h4><p>计算属性 computed 函数需要从 vue 中引入。<br>computed 函数，传一个函数，用 return 返回一个值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fulltName <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果需要修改计算属性，要对计算属性设置 get 和 set。此时 computed 传入一个对象，在get中需要 return 一个值</p><ul><li>通过 ref 计算出来的计算属性也属于 ref 响应式</li><li>get() 中 pre 参数，可以获取到上一个计算属性的值。<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> firstName <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'张'</span><span class="token punctuation">)</span><span class="token keyword">const</span> lastName <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'三'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fullName <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 因为 fullName 是通过两个 ref 计算出来的，所以 fullName 也是 ref，需要通过 .value 取值</span>  <span class="token function">get</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span>    <span class="token comment">// 通过 return 返回一个返回值</span>    <span class="token keyword">return</span> firstName<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> lastName<span class="token punctuation">.</span>value  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    firstName<span class="token punctuation">.</span>value <span class="token operator">=</span> newValue<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    lastName<span class="token punctuation">.</span>value <span class="token operator">=</span> newValue<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h4><p>需要从 vue 中引入 watch。watch 是一个函数</p><ul><li>第一个参数是侦听谁</li><li>第二个参数是一个函数，被侦听的发生变化时要执行什么</li><li>第三个参数是一个对象配置。deep , immediate 和 once<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">watch</span><span class="token punctuation">(</span>question<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    answer<span class="token punctuation">.</span>value <span class="token operator">=</span> newValue<span class="token punctuation">.</span>length <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">'偶'</span> <span class="token operator">:</span> <span class="token string">"鸡"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">immediate</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">once</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="模板引用"><a href="#模板引用" class="headerlink" title="模板引用"></a>模板引用</h4><h5 id="组件上的-ref"><a href="#组件上的-ref" class="headerlink" title="组件上的 ref"></a>组件上的 ref</h5><p>给元素设置 ref 属性，vue 中引入 <strong>useTemplateRef</strong>，通过 <strong>useTemplateRef</strong> 函数获取真实DOM</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 先创建再引用</span><span class="token keyword">const</span> h2 <span class="token operator">=</span> <span class="token function">useTemplateRef</span><span class="token punctuation">(</span><span class="token string">'my-h2'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">getH2DOM</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 通过 value 获取到真实DOM</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>h2<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><ul><li>onMounted 组件初始挂载完毕<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'组件初始化渲染完毕'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>onUpdated 组件更新并渲染完毕</li><li>onUnmounted 组件卸载</li></ul><h4 id="组件的全局注册"><a href="#组件的全局注册" class="headerlink" title="组件的全局注册"></a>组件的全局注册</h4><p>在 main.js 中导入要全局注册的组件，用 app.component() 方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 1.导入组件</span><span class="token keyword">import</span> MyBtn <span class="token keyword">from</span> <span class="token string">'./global-components/MyBtn.vue'</span><span class="token comment">// 2.全局注册组件</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>  <span class="token comment">// component('组件名'，组件名)</span>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'MyBtn'</span><span class="token punctuation">,</span> MyBtn<span class="token punctuation">)</span><span class="token comment">// 3.最后再执行挂载 app</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="props"><a href="#props" class="headerlink" title="props"></a>props</h4><ul><li>父组件给子组件传，正常传</li><li>子组件用 defineProps() 函数接收。<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// props 属于 reactive 响应式数据，不可以修改。通过 props.msg 获取</span><span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// 对象的解构赋值方式,下边可以直接用 msg 进行响应式处理</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>msg<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">msg</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">type</span><span class="token operator">:</span>String<span class="token punctuation">,</span>    <span class="token keyword">default</span><span class="token operator">:</span><span class="token string">"hello"</span><span class="token punctuation">,</span>    <span class="token literal-property property">required</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token function-variable function">validator</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>   <span class="token comment">// 自定义校验函数</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="自定义事件-1"><a href="#自定义事件-1" class="headerlink" title="自定义事件"></a>自定义事件</h4><ul><li>父组件给子组件传自定义事件，正常传</li><li>子组件在 template 中可以直接使用$emit(); 在 script 用 defineEmits() 函数接收<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> customEvents <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'myClick'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">customEvents</span><span class="token punctuation">(</span><span class="token string">'myClick'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="组件上的-v-model"><a href="#组件上的-v-model" class="headerlink" title="组件上的 v-model"></a>组件上的 v-model</h4><ul><li>父组件给子组件传正常写 v-model</li><li>子组件用 defineModel 接收,是 ref 响应式数据,用 .value 修改<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> model <span class="token operator">=</span> <span class="token function">defineModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 使用 model.value 修改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h4 id="透传-attributes"><a href="#透传-attributes" class="headerlink" title="透传 attributes"></a>透传 attributes</h4><ul><li>父组件给子组件写的属性，都会被透传到子组件中。</li><li>子组件可以通过 $attrs 获取到透传的属性。如父组件传了 :x&#x3D;’10’,子组件可以用 $attrs.x 获取到 10.</li><li>子组件可以通过 inheritAttrs 设置是否透传。默认是 true，透传。false 不透传。<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 取消透传</span><span class="token operator">&lt;</span>script setup<span class="token operator">></span><span class="token function">defineOptions</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 继承属性设置为 false</span>  <span class="token literal-property property">inheritAttrs</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h4><p>需要用 &lt; template &gt; 双标签包裹</p><ul><li>与 vue2 的区别是：比vue2多一个动态插槽名称。</li><li>用 $slots 获取到插槽。$slots.main 来判断是否传了 main 插槽。</li></ul><h4 id="依赖注入-1"><a href="#依赖注入-1" class="headerlink" title="依赖注入"></a>依赖注入</h4><p>依赖注入只可以是直系关系的组件之间使用。</p><ul><li>通过 provide 和 inject 来实现依赖注入，需要从 vue 中引入 provide 和 inject 方法。</li><li>provide(key, value) key 是注入的名称，value 是注入的值。</li><li>子组件中通过 解构赋值 的方式，接收注入的值。<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// provide('名称', 值)。值设置成对象，可以传多个值，包括响应式数据和方法。</span><span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">'msg'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  msg<span class="token punctuation">,</span>  changeMsg<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> msg<span class="token punctuation">,</span> changeMsg <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">'msg'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 必须类似于 vHighlight、vFocus 这样式命名变量。</span><span class="token keyword">const</span> vHighlight <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">mounted</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 在 mounted 生命周期钩子函数中，可以拿到真实DOM。</span>    el<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'is-highlight'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 在 template 中使用 v-highlight、v-focus 来绑定自定义指令。</span><span class="token operator">&lt;</span>div v<span class="token operator">-</span>highlight<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="内置组件-Transition"><a href="#内置组件-Transition" class="headerlink" title="内置组件 Transition"></a>内置组件 Transition</h4><ul><li>首先给 transition 标签传一个 name，来声明过渡效果的名<br>6个 CSS class 与 vue2 有不同</li><li>v-enter-from</li><li>v-enter-active</li><li>v-enter-to</li><li>v-leave-from</li><li>v-leave-active</li><li>v-leave-to<br>如果想在节点初次渲染的时候应用一个过渡效果，可以给 transition 加 appear 属性<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>transition name<span class="token operator">=</span><span class="token string">"fade"</span> appear<span class="token operator">></span>  <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"show"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>transition<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="内置组件-teleport"><a href="#内置组件-teleport" class="headerlink" title="内置组件 teleport"></a>内置组件 teleport</h4><ul><li>用于将一个组件的模板传送到 DOM 外的其他地方</li><li>通过 to 属性来指定渲染到哪里。to 的值可以是任何 css 选择器：标签，类名，ID</li><li>要 to 的元素必须在传送前存在，否则会报错。可以给 teleport 加 defer 属性来延迟解析 teleport<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>teleport to<span class="token operator">=</span><span class="token string">"#app"</span> defer<span class="token operator">></span>  <span class="token operator">&lt;</span>h1<span class="token operator">></span>hello<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>teleport<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><p>vue3 安装 vue-router 4 版本</p><ul><li>执行 <code>npm i vue-router@4</code></li></ul><h5 id="创建路由时的三种不同模式"><a href="#创建路由时的三种不同模式" class="headerlink" title="创建路由时的三种不同模式"></a>创建路由时的三种不同模式</h5><ul><li>createWebHashHistory()  hash 模式，地址栏带 # 的那种</li><li>createWebHistory()  history 模式，地址栏正常的那种。一般用这种方式，但是需要后端服务器支持。不然项目部署之后，除了在index.html，其他页面刷新页面会 404。需要后端配置，将所有请求都转发到 index.html</li><li>createMemoryHistory()  内存模式，地址栏正常的那种。在 URL 中手动输入网址不会跳转，路由跳转时 URL 不会变，也不会有历史记录，不可以进行前进和后退</li></ul><h5 id="动态路由匹配"><a href="#动态路由匹配" class="headerlink" title="动态路由匹配"></a>动态路由匹配</h5><ul><li>动态路由匹配，就是把动态的路径参数，通过 :id 的方式，传给路由组件。</li><li>在 template 中，可以直接通过 $route.params.id 来获取到 id 的值。</li><li>在 script 中，通过 useRoute() 来获取到当前路由信息, useRoute 方法需要从 vue 中导入</li><li>通过 useRouter() 来获取到路由信息, useRouter 方法需要从 vue 中导入<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useRoute <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">useRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> id <span class="token operator">=</span> route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="路由匹配正则表达式"><a href="#路由匹配正则表达式" class="headerlink" title="路由匹配正则表达式"></a>路由匹配正则表达式</h5><p>(正则表达式) (\d+)表示匹配一个或多个数字，多写一个 \ 确保后面的 \ 能正确被转义</p><ul><li><p>任意其他页面 (.+)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> HomeView <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> AboutView <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 路由匹配正则</span>  <span class="token comment">// (正则表达式) (\\d+)表示匹配一个或多个数字</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/user/:id([\\da-zA-Z+]+)'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> UserView<span class="token punctuation">,</span><span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/404'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> NotFoundView <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 任意其他页面</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/:any(\.+)'</span><span class="token punctuation">,</span> <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">'/404'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>动态查询参数<br>userView 组件中</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 动态查询参数 id</span><span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>地址栏中的查询参数</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RouterLink</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/about?a=100&amp;b=2000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转到 about 页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RouterLink</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">useRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h5 id="router-view-插槽-和-keep-alive"><a href="#router-view-插槽-和-keep-alive" class="headerlink" title="router-view 插槽 和 keep-alive"></a>router-view 插槽 和 keep-alive</h5><p>router-view 用双标签，传作用域插槽，拿到对应路由的组件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123; Component &#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Component<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h5><h3 id="pinia"><a href="#pinia" class="headerlink" title="pinia"></a>pinia</h3><p>定义一个 Store 文件夹，用来存储所有的store模块</p><ul><li>在 store 文件夹中，新建一个 counter.js 文件，使用 defineStore 方法来定义一个 store，defineStore 方法需要从 pinia 中导入</li></ul><h3 id="项目打包"><a href="#项目打包" class="headerlink" title="项目打包"></a>项目打包</h3><ul><li>执行<code>npm run build</code>具体的看 package.json 中的配置</li><li>打包后，会生成一个 dist 文件夹，里面就是打包后的文件，html,css,js等</li><li>运行项目需要把 dist 文件夹放到服务器中，才能访问到，执行<code>serve .</code></li></ul><h3 id="echatrs-图表自适应窗口大小"><a href="#echatrs-图表自适应窗口大小" class="headerlink" title="echatrs 图表自适应窗口大小"></a>echatrs 图表自适应窗口大小</h3><p>设置监听事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token function">methods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ......... //</span>    <span class="token comment">// 初始化图表</span>    <span class="token function">initEcharts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resizeFun<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">resizeFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>myChart<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">async</span> <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 初始化echarts展示本周的数据</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getTableList</span><span class="token punctuation">(</span><span class="token string">"/system/dashboard/loginData/week"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initEcharts</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resizeFun<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/07/06/node/"/>
      <url>/2025/07/06/node/</url>
      
        <content type="html"><![CDATA[<h3 id="node-学习"><a href="#node-学习" class="headerlink" title="node 学习"></a>node 学习</h3><p>node 是让 js 运行在服务器的一个平台</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>直接官网傻瓜安装，推荐安装 nvm(node version manage),当作 node 的版本管理工具</p><ul><li>14 16 18 20<br>nvm 命令</li><li><code>nvm -v</code> 查看当前node版本</li><li><code>nvm list</code> 查看node版本列表</li><li><code>nvm list available</code>查看可安装版本</li><li><code>nvm install 版本号</code>   安装某个版本</li><li><code>nvm uninstall 版本号</code> 卸载某个版本</li><li><code>nvm use 版本号</code> 使用某个版本<br>替换nvm的镜像源，找到 settings.text 去官网赋值镜像源粘贴即可</li></ul><h4 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h4><p>node package manager —- node 的包管理工具</p><ul><li><code>npm init -y</code> 初始化为 node 项目</li><li><code>npm i [包名@版本号]</code> 装包<br>在项目内的 package.json 内可以查看到装包的版本。在node_modules可以看到下载好的包</li><li><code>npm uni [包名]</code>卸包</li></ul><p>npm 安装包时候的参数</p><ul><li><code>--global</code> 简写 <code>-g</code> 全局安装到电脑上，否则下载到项目里面</li><li><code>--save</code> 简写 <code>-S</code> 安装必要包 (默认)</li><li><code>--save-dev</code> 简写 <code>-D</code> 安装非必要工具包</li></ul><p>一键下载所有包</p><ul><li><code>npm i</code> 前提得有package.json文件</li></ul><h4 id="node-模块"><a href="#node-模块" class="headerlink" title="node 模块"></a>node 模块</h4><ul><li>核心模块（后端服务）JS 自带的 Date对象,Math对象</li><li>第三方模块（npm 网站下载的）</li><li>自定义模块</li></ul><p>运行模块<br>命令行输入<code>node [文件名]</code></p><ul><li>用 webpack 编译项目 <code>npx webpack</code> 然后在html文件中引入编译好的文件，模块就可以运行了</li></ul><h5 id="自动编译运行在服务器上"><a href="#自动编译运行在服务器上" class="headerlink" title="自动编译运行在服务器上"></a>自动编译运行在服务器上</h5><ol><li><code>npm i -D webpack</code></li><li><code>npm i -D webpack-cli</code></li><li><code>npm i -D html-webpack-plugin</code> 下载插件，自动编译成html文件</li><li><code>npm i -D webpack-dev-server</code> 下载实时编译插件<strong>webpack-dev-server</strong></li></ol><ul><li>package.json中 start 的配置如下：<br><img src="/image.png" alt="package.json中 start 的配置"></li><li>执行 <code>npm run start</code>跑在服务器上<br>使用模块 module</li><li>核心和第三方模块 直接使用 <code>require(&#39;包名&#39;)</code> 方法引入<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> dayjs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'dayjs'</span><span class="token punctuation">)</span>  <span class="token comment">// 变量名可以随意 如果变量名为 a ，则用 a().来引用</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>自定义模块导出<ul><li>默认 exports 的是一个对象<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">200</span>exports<span class="token punctuation">.</span>a <span class="token operator">=</span> aexports<span class="token punctuation">.</span>b <span class="token operator">=</span> b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>直接导出数值<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>导出对象<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span>a<span class="token punctuation">,</span><span class="token literal-property property">b</span><span class="token operator">:</span>b<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>导出数组<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li>自定义模块导入  用<code>require(&#39;路径&#39;)</code>引入</li></ul><p>模块的好处</p><ul><li>独立作用域</li><li>解决了命名冲突</li><li>模块可以相互导入</li><li>相同的功能写为一个js功能模块，复用性更强</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/07/05/git/"/>
      <url>/2025/07/05/git/</url>
      
        <content type="html"><![CDATA[<h3 id="GIT"><a href="#GIT" class="headerlink" title="GIT"></a>GIT</h3><p>代码托管工具<br>下载 git bash</p><h4 id="一、github"><a href="#一、github" class="headerlink" title="一、github"></a>一、github</h4><h4 id="二、gitee-码云"><a href="#二、gitee-码云" class="headerlink" title="二、gitee 码云"></a>二、gitee 码云</h4><h5 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h5><p>代码托管的地方。一个项目要用一个仓库管理</p><h5 id="Git-操作"><a href="#Git-操作" class="headerlink" title="Git 操作"></a>Git 操作</h5><p><strong>常规操作</strong></p><ul><li>克隆仓库到本地(第一次克隆的时候需要输入用户名和密码)<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable"><span class="token variable">`</span><span class="token function">git</span> clone <span class="token string">'地址'</span><span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>仓库内新增代码，要将更新好的内容记录到git<ol><li>执行<code>git add .</code>命令</li><li>执行<code>git commit -m&#39;版本信息&#39;</code>命令，将本次修改制作成版本，并添加版本说明</li><li>执行<code>git push</code>命令，将制作好的版本，提交到云端，跟本地同步</li></ol></li><li>git 三步: add commid push</li></ul><p><strong>多人操作同一仓库的同一分支</strong><br>有两个开发者 a 和 b，默认都是和远端同步都存在 1 2 3 版本</p><ul><li><p>开发者 a 更新某个功能制作版本 4 到远端</p></li><li><p>开发者 b 更新功能制作版本 5更新到远端，此次更新失败，本地的与远端的版本号不匹配</p><p>情况 1 :与 a 功能完全无关</p><ul><li>需要执行<code>git pull</code>命令，将远端的版本拉取到本地，默认会自动合并版本(可能命令行会弹窗提示出入合并的原因留言，不鸟她，shift+z+z即可)</li></ul><p>情况 2 :与 a 功能有关</p><ul><li>需要执行<code>git pull</code>命令，将远端的版本拉取到本地，然后在冲突文件里面选择要保留哪种修改</li></ul></li><li><p>再次执行<code>git push</code> 命令将制作好的版本，提交到远端，跟远端同步<br><strong>本地做好的项目，做成.git上传到远端</strong></p></li><li><p>拥有本地项目叫 my-pro</p></li><li><p>远端拥有空仓库 my-pro</p></li><li><p>本地项目制作成仓库 进入my-pro里面执行<code>git init</code></p></li><li><p>git 三步，直接 git push 会失败，需将本地仓库与远端仓库建立联系，给本地仓库增加远端地址，执行<code>git remote add origin [url]</code></p></li><li><p>再次同步 <code>git push -u origin [branch]</code> -u:–set -upstream,上游<br><strong>分支操作</strong></p></li><li><p>远端新建分支，分支起点一般选择 master</p></li><li><p>本地可以直执行<code>git pull</code> 拉取远端新建的分支到本地</p></li><li><p>执行 <code>git checkout [分支名]</code> 切换到对应的分支 (当前分支必须无修改更新，才可以切换到其他分支)</p></li><li><p>切到一个开发分支更新代码上传，比如dev-a分支新增 about.html 并上传。<strong>每个分支默认是独立的互不影响</strong></p></li></ul><h4 id="git-命令"><a href="#git-命令" class="headerlink" title="git 命令"></a>git 命令</h4><ul><li><p><code>git clone &#39;地址&#39;</code> 将云端的文件克隆下来</p></li><li><p><code>git add . </code>  将本地的所有修改记录 .git 添加到云端,云端可以通过 .git 追踪修改记录</p></li><li><p><code>git commit -m&#39;版本信息&#39;</code> 提交修改，并附加版本说明</p></li><li><p><code>git push</code> 将制作好的版本，提交到云端</p></li><li><p><code>git pull</code> 将云端的版本拉到本地</p></li><li><p><code>git pull origin master</code>把远端master分支的文件拉下来</p></li><li><p><code>git log</code> 查看本地版本</p><ul><li>参数 –oneline 使用一行展示信息</li><li>参数 -r 查看远端版本</li></ul></li><li><p><code>git init</code>初始化为仓库</p></li><li><p><code>git status</code> 查看当前仓库的状态</p></li><li><p><code>git branch</code> 查看本地仓库的分支</p><ul><li>参数 -r 查看远端分支</li><li><code>git branch [branchName]</code> 以当前分支为起点新建分支</li></ul></li><li><p><code>git checkout [branchName]</code> 切换分支</p></li><li><p><code>git checkout -b [branchName]</code> 以当前分支为起点新建分支并切换过去</p></li><li><p><code>git merge [branckName]</code> 合并分支(主分支才可以合并，必须在master分支执行此语句)</p></li><li><p><code>git reset</code> 回退版本</p></li></ul><h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><p>shift+Z 两次 返回<br>ctrl+c 关闭服务</p><h3 id="密钥设置"><a href="#密钥设置" class="headerlink" title="密钥设置"></a>密钥设置</h3><h4 id="生成-RSA-密钥"><a href="#生成-RSA-密钥" class="headerlink" title="生成 RSA 密钥"></a>生成 RSA 密钥</h4><p><code>ssh-keygen -t rsa</code></p><h4 id="获取-RSA-公钥"><a href="#获取-RSA-公钥" class="headerlink" title="获取 RSA 公钥"></a>获取 RSA 公钥</h4><p><code>cat ~/.ssh/id_rsa.pub</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/07/05/ajax/"/>
      <url>/2025/07/05/ajax/</url>
      
        <content type="html"><![CDATA[<h2 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h2><p>Asynchronous JavaScript and XML 就是 异步的JavaScript 和 XML。<br>ajax 是 浏览器和服务器之间的一种异步的通讯方式</p><ul><li>接口文档<ol><li>地址</li><li>请求方法 GET POST PUT PATCH DELETE</li><li>参数</li><li>返回值  类型是 JSON 字符串</li></ol></li></ul><h3 id="原生-的-ajax"><a href="#原生-的-ajax" class="headerlink" title="原生 的 ajax"></a>原生 的 ajax</h3><ol><li>new 一个 xhr 对象</li><li>创建&#x2F;打开请求接口 open()</li><li>发送请求 send()</li><li>监听请求过程 onreadystatechange()  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// GET 请求传递参数 在地址栏的 ? 部分直接写即可</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'http://localhost:3008/posts?_page=1&amp;_per_page=2'</span><span class="token punctuation">)</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>xhr<span class="token punctuation">.</span><span class="token function">onreadystatechange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// xhr.status 状态码 是200-300 是请求成功</span>  <span class="token comment">// xhr.readystate 状态值 是 4    请求结束</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span> and xhr<span class="token punctuation">.</span>readystate <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求成功'</span><span class="token punctuation">)</span>    <span class="token comment">// 返回的内容 responseText</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span> <span class="token string">'http://localhost:3008/posts'</span><span class="token punctuation">)</span><span class="token comment">// POST 传参写在 send 方法内，用JSON.stringify()转成JSON格式</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>  <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">userId</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'xxxxxxxxx   xx x x x '</span><span class="token punctuation">,</span>    <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token string">'ghgldsfjgdjkf'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">201</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求成功!'</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="GET-和-POST-的区别"><a href="#GET-和-POST-的区别" class="headerlink" title="GET 和 POST 的区别"></a>GET 和 POST 的区别</h4><h4 id="JSON-文件"><a href="#JSON-文件" class="headerlink" title="JSON 文件"></a>JSON 文件</h4><ul><li>JSON 文件内一般就写成类对象形式</li><li>对象的属性名必须是双引号</li><li>每一项的最后不能写逗号结尾</li></ul><h3 id="jquery-的-ajax"><a href="#jquery-的-ajax" class="headerlink" title="jquery 的 ajax"></a>jquery 的 ajax</h3><h3 id="axios-的-ajax"><a href="#axios-的-ajax" class="headerlink" title="axios 的 ajax"></a>axios 的 ajax</h3><ul><li>_page:2 当前页数  </li><li>_per_page:4 每页有几项数据<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http:localhost:3008'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>axios 的 get 请求传递参数的时候，可以在 get 方法的第二个参数内设置</li><li>axios.get(url,config) config:配置<ul><li>config 是一个对象 params:{_page:1,_per_page:4}<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// get 方法实例</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3008/posts'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">_page</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">_per_page</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> posts <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> h3 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'h3'</span><span class="token punctuation">)</span>    h3<span class="token punctuation">.</span>innerText <span class="token operator">=</span> item<span class="token punctuation">.</span>title    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.posts'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>h3<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// post 方法实例</span>axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3008/posts'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">userId</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"sunt aut facere repellat provident occaecati excepturi optio reprehenderit"</span><span class="token punctuation">,</span>    <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token string">"quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="封装-axios-请求"><a href="#封装-axios-请求" class="headerlink" title="封装 axios 请求"></a>封装 axios 请求</h4><p>请求配置 &#x2F; 请求头配置</p><ul><li>封装 axios 的时候，使用 axios.create() 方法创建实例，而不直接用 axios.get 等。然后默认导出实例对象 instance，使用的时候默认导入即可。<ul><li>URL</li><li>method 请求方法</li><li>baseURL 基地址</li><li>headers 请求头配置</li><li>timeout <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">baseURL</span><span class="token operator">:</span> <span class="token string">"http://localhost:3008"</span><span class="token punctuation">,</span>  <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">5000</span><span class="token punctuation">,</span>  <span class="token comment">// 请求头配置</span>  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token string-property property">'platform'</span><span class="token operator">:</span> <span class="token string">'h5'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>请求拦截器：所有请求发出的时候会触发<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> config<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>常用的功能</li></ul></li></ul><ol><li>权限判断 登录判断</li><li>修改请求头配置</li><li>必须返回请求配置</li></ol><p>响应拦截器</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> res<span class="token punctuation">.</span>data<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>常用的功能</p><ol><li>公共代码处理方法</li><li>对返回数据的统一格式化处理</li></ol><h4 id="封装-get"><a href="#封装-get" class="headerlink" title="封装 get"></a>封装 get</h4><p>await 的功能：把异步操作变为同步，并拿到请求的返回值<br>await 的后面只能跟 async 函数和 Promise 对象<br>get 函数的第一个参数是地址，第二个参数是配置项</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 封装</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">$get</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> params <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> instance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> params<span class="token punctuation">,</span> headers <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token comment">// 调用</span><span class="token comment">// 命名导入</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> $get<span class="token punctuation">,</span> $post <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../util/request"</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token function">sendRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">$get</span><span class="token punctuation">(</span>    <span class="token string">"/newsList"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">_page</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">_per_page</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">Xtoken</span><span class="token operator">:</span> <span class="token string">"xxxxxxxxxxxxxxasdf"</span> <span class="token punctuation">&#125;</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="封装-post"><a href="#封装-post" class="headerlink" title="封装 post"></a>封装 post</h4><p>post 函数的第一个参数是地址，第二个参数是data，第三个参数是配置项</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 封装</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">$post</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> instance<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> headers <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token comment">// 调用</span><span class="token keyword">async</span> <span class="token function">sendPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">$post</span><span class="token punctuation">(</span>    <span class="token string">"/newsList"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">newsTitle</span><span class="token operator">:</span> <span class="token string">"我是哈哈哈哈"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">Xtoken</span><span class="token operator">:</span> <span class="token string">"aaaaaaaaaaaaaaa"</span> <span class="token punctuation">&#125;</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h4><p>CancleToken</p><h3 id="alova-的-ajax"><a href="#alova-的-ajax" class="headerlink" title="alova 的 ajax"></a>alova 的 ajax</h3><h3 id="浏览器同源策略"><a href="#浏览器同源策略" class="headerlink" title="浏览器同源策略"></a>浏览器同源策略</h3><p>协议、域名、端口号都相同</p><h3 id="浏览器跨域策略"><a href="#浏览器跨域策略" class="headerlink" title="浏览器跨域策略"></a>浏览器跨域策略</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/07/05/shell/"/>
      <url>/2025/07/05/shell/</url>
      
        <content type="html"><![CDATA[<h3 id="git-bash-shell"><a href="#git-bash-shell" class="headerlink" title="git bash-shell"></a>git bash-shell</h3><p>git bash:命令行</p><h4 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h4><p>创建文件夹<br>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> 文件夹名1 名2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><h4 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h4><p>创建文件,加对应类型后缀<br>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> xxx.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><h4 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h4><p>跳转目录<br>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/     上一级<span class="token builtin class-name">cd</span> ./test/<span class="token builtin class-name">cd</span> ~       用户主目录<span class="token builtin class-name">cd</span> d:      进入D盘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p><h4 id="ls-a"><a href="#ls-a" class="headerlink" title="ls -a"></a>ls -a</h4><p>查看当前目录下内容<br>参数 -a 允许查看隐藏文件</p><h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><p>查看文件内容</p><h4 id="pwd查看当前路径"><a href="#pwd查看当前路径" class="headerlink" title="pwd查看当前路径"></a>pwd查看当前路径</h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>小程序</title>
      <link href="/2025/05/14/miniProgram/"/>
      <url>/2025/05/14/miniProgram/</url>
      
        <content type="html"><![CDATA[<h3 id="本地开发注意事项"><a href="#本地开发注意事项" class="headerlink" title="本地开发注意事项"></a>本地开发注意事项</h3><ul><li>本地开发时，一定要把详情 -&gt; 本地设置中的不校验合法域名勾选上。</li></ul><h3 id="小程序开发像素单位"><a href="#小程序开发像素单位" class="headerlink" title="小程序开发像素单位"></a>小程序开发像素单位</h3><p>在小程序的开发中我们经常使用的像素单位是rpx。</p><ul><li>rpx（responsive pixel）: 响应式像素。可以根据屏幕宽度进行自适应。规定屏幕最大宽为750rpx。</li><li>px（pixel）: 像素。</li><li>在 750rpx 中 1px &#x3D; 1rpx。实际开发中要与设计稿等比缩放</li></ul>]]></content>
      
      
      <categories>
          
          <category> miniProgram </category>
          
      </categories>
      
      
        <tags>
            
            <tag> miniProgram </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 基础</title>
      <link href="/2025/05/07/js%E5%9F%BA%E7%A1%80/"/>
      <url>/2025/05/07/js%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="一、变量的声明"><a href="#一、变量的声明" class="headerlink" title="一、变量的声明"></a>一、变量的声明</h3><p><strong>变量的命名规则</strong></p><ol><li>变量名只能以字母、$、下划线开头，不能是关键字</li><li>变量名要语义化</li><li>多单词组合用小驼峰方式 如：searchText</li></ol><ul><li><p>声明变量的关键字  var</p></li><li><p>不能反复声明同一变量，重复声明的话后面的值会覆盖掉前面的值</p></li><li><p>var 关键字有变量声明提升机制：将变量声明提升到当前作用域的顶部</p></li><li><p>声明全局变量 <code>window.x = 100</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="二、数据类型-8大类-重点⭐"><a href="#二、数据类型-8大类-重点⭐" class="headerlink" title="二、数据类型 8大类 (重点⭐)"></a>二、数据类型 8大类 (重点⭐)</h3><p>原始数据类型</p><ul><li>数字   number</li><li>字符串 string</li><li>布尔值 boolean</li><li>大整型 BigInt</li><li>undefined  变量声明了未赋值</li><li>null</li><li>symbol</li></ul><p>引用数据类型：object Array Function</p><ul><li>对象 object</li></ul><h3 id="三、控制台输出"><a href="#三、控制台输出" class="headerlink" title="三、控制台输出"></a>三、控制台输出</h3><ul><li>输出多项用,隔开<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'循环'</span><span class="token punctuation">)</span> <span class="token comment">//多项输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="四、数据类型转换"><a href="#四、数据类型转换" class="headerlink" title="四、数据类型转换"></a>四、数据类型转换</h3><h4 id="字符串转数值"><a href="#字符串转数值" class="headerlink" title="字符串转数值"></a>字符串转数值</h4><ul><li>parseInt(值) 转成整数，小数位舍去不管  parseFloat(值) 转成浮点数</li><li>一个字符一个字符的开始转换，遇到不能转换的就停止，若第一位就不是数字则结果是： NaN(Not a Number错误的数字)</li><li>Number(值)</li><li>直接看整体是否可以转换，若不能转换成数字则结果是：NaN(错误的数字)</li><li>可以将布尔值转化为数字 true –&gt; 1  false –&gt; 0</li><li>巧妙用 * ，* 有默认 number() 转换</li></ul><h4 id="数字转字符串-任意类型转字符串"><a href="#数字转字符串-任意类型转字符串" class="headerlink" title="数字转字符串 任意类型转字符串"></a>数字转字符串 任意类型转字符串</h4><ul><li><p>String(值)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> number <span class="token operator">=</span> <span class="token number">100</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>值.toString()</p></li><li><p>值.toString(2) 数值转换成二进制的字符串</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> number <span class="token operator">=</span> <span class="token number">100</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>number<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>toFixed(n) 保留n位小数并转成字符串</p></li><li><p>巧妙用 +</p></li></ul><h4 id="其他类型转布尔类型"><a href="#其他类型转布尔类型" class="headerlink" title="其他类型转布尔类型"></a>其他类型转布尔类型</h4><ul><li>Boolean(值)<br>数字 0,字符串空,undefined, null, NaN 转布尔值为false</li></ul><h3 id="五、数据类型检查"><a href="#五、数据类型检查" class="headerlink" title="五、数据类型检查"></a>五、数据类型检查</h3><ul><li>typeof 值</li><li>得到数据类型的英文字符串<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// object   JS 留下的一个 BUG    Object 的低三位类型标签是 000 ，null 的低三位类型标签也是 000。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>instanceof<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>Object.prototype.toString.call()</li><li>判断某个值是哪个构造函数的实例</li><li>Array.isArray()</li><li>判断某个值是否是数组</li></ul><h3 id="六、运算符"><a href="#六、运算符" class="headerlink" title="六、运算符"></a>六、运算符</h3><h4 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算 + - * &#x2F; %"></a>数学运算 + - * &#x2F; %</h4><ul><li>&#x2F; % * - 有隐藏的数据类型转换 默认将符号两侧的值按照 Number 转换后再运算</li><li>用 * 最简单的数字字符串转数字<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token string">'23'</span><span class="token keyword">var</span> num1 <span class="token operator">=</span> num <span class="token operator">*</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>‘+’ 有2个意义</li></ul><ol><li>数学运算</li><li>字符串拼接 只要符号两边出现字符串，将非字符串转为字符串做拼接运算</li></ol><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符 &gt; &lt; &gt;&#x3D; &lt;&#x3D; &#x3D;&#x3D; &#x3D;&#x3D;&#x3D; !&#x3D; !&#x3D;&#x3D;"></a>比较运算符 &gt; &lt; &gt;&#x3D; &lt;&#x3D; &#x3D;&#x3D; &#x3D;&#x3D;&#x3D; !&#x3D; !&#x3D;&#x3D;</h4><ul><li>&#x3D;&#x3D; 和 &#x3D;&#x3D;&#x3D; 后者除了值相等以外，数据类型也得相同</li><li>!&#x3D; 和 !&#x3D;&#x3D; 后者值不相等和数据类型不同结果为true</li></ul><p>例子</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">==</span> <span class="token string">'10'</span><span class="token punctuation">)</span>  <span class="token boolean">true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">===</span> <span class="token string">'10'</span><span class="token punctuation">)</span> <span class="token boolean">false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">!=</span> <span class="token string">'10'</span><span class="token punctuation">)</span>  <span class="token boolean">false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">!==</span> <span class="token string">'10'</span><span class="token punctuation">)</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="逻辑运算符-！"><a href="#逻辑运算符-！" class="headerlink" title="逻辑运算符 &amp;&amp; || ！"></a>逻辑运算符 &amp;&amp; || ！</h4><ul><li>! 隐藏的数据类型转换 Boolean<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 当 || 的左边是 false 的时候使用右边的数值</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>oldTodoJson<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">// ?? 运算符，当 ?? 左边是 undefined 或 null 的时候使用右边的数值</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>oldTodoJson<span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="双目运算符-–"><a href="#双目运算符-–" class="headerlink" title="双目运算符 ++ – +&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; %&#x3D;"></a>双目运算符 ++ – +&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; %&#x3D;</h4><ul><li>隐藏的数据类型转换 默认将符号两侧的值按照 Number 转换后再运算</li><li>++ 自加1； ++ 在前是先运算后使用，++ 在后是先使用后运算</li></ul><h4 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h4><ul><li>条件 ? 成立执行语句 : 不成立执行语句<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> number4 <span class="token operator">=</span> <span class="token number">10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>number4<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token number">10</span>  <span class="token comment">//输出完之后 number4 = 11;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>number4<span class="token punctuation">)</span>  <span class="token number">12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="使用-控制运算符的运算顺序"><a href="#使用-控制运算符的运算顺序" class="headerlink" title="使用 () 控制运算符的运算顺序"></a>使用 () 控制运算符的运算顺序</h4><h3 id="七、语句"><a href="#七、语句" class="headerlink" title="七、语句"></a>七、语句</h3><h4 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h4><p>if 条件语句</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> 满足条件执行的内容 <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>语句块<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> number <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">100</span><span class="token keyword">if</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是 Number'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//简化写法</span><span class="token keyword">if</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是 Number'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多条件 顺序执行判断 前面的成立，后面的就不执行了</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token number">71</span><span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">></span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'优秀'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">></span> <span class="token number">70</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'良好'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">></span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'及格'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'不及格'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>switch 分支语句  用于相等判断</li><li>switch(被判断的值){ case 值: 满足相等条件执行的内容；<strong>break</strong>；多个case,最后写一个default}</li></ul><p>例子</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> day <span class="token operator">=</span> <span class="token string">'5'</span><span class="token keyword">switch</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'星期一 上大物'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'星期二 上大物'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'星期三 上大物'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'星期四 上大物'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'星期五 上大物'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'假期'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h4><ul><li>for 循环语句</li><li>continue  跳出当前次,进行下一次</li><li>break     结束 for 循环<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 求1-100的和</span><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> n <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>sum <span class="token operator">+=</span> n<span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>while 循环语句</li><li>语法格式<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">while</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>语句块<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>do - while 循环语句</li><li>语法格式<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">do</span><span class="token punctuation">&#123;</span>语句块<span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="八、函数"><a href="#八、函数" class="headerlink" title="八、函数"></a>八、函数</h3><h4 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h4><ul><li>声明函数 function 函数名(){}</li><li>函数名命名规则跟变量名一致</li><li>函数名后面的() 可以设置函数参数</li><li>{} 内 调用函数执行的内容（函数内书写的功能代码）</li><li>创建的时候不执行函数里面的内容，调用的时候才执行</li><li>调用函数： 函数名()</li></ul><h4 id="函数的作用域"><a href="#函数的作用域" class="headerlink" title="函数的作用域"></a>函数的作用域</h4><ul><li>局部作用域：函数内部定义的变量，函数等，函数外是访问不到的</li><li>使用 <strong>var 定义</strong> 变量的时候 会有<strong>变量声明提升机制</strong></li><li>无论再当前作用域下任何地方声明变量 声明过程都会提升到当前作用域顶端<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">function</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token comment">// var a</span><span class="token comment">// console.log(window.a) //window 代表全局 window.a 访问全局下的a</span><span class="token comment">// a = 10</span><span class="token punctuation">&#125;</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">// undefined  100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>window 代表全局</li></ul><h4 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h4><ul><li>函数创建的时候定义的参数叫 <strong>形参</strong></li><li>函数调用时传递的参数叫 <strong>实参</strong></li><li><strong>形参相当于在函数内部定义变量 不会给变量赋值</strong>（会考⭐）</li><li>实参相当于给形参赋值</li><li>函数调用的时候按顺序传递参数</li></ul><h4 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h4><ul><li>设置返回值的关键字 return 只能返回一个值</li><li><strong>想要返回两个或多个，return 后面跟对象或数组</strong></li><li>return 跳出函数了 后面的语句不会执行</li></ul><h3 id="九、内置对象-object"><a href="#九、内置对象-object" class="headerlink" title="九、内置对象 object"></a>九、内置对象 object</h3><h4 id="（一）普通对象"><a href="#（一）普通对象" class="headerlink" title="（一）普通对象"></a>（一）普通对象</h4><ul><li>数据的无序集合</li><li>{key:value} —-&gt; {属性:值，属性:值，属性:值….}</li><li>对象内的特殊属性：属性的属性值是函数，也称之为对象的方法</li><li>定义一个空对象的时候 初始值赋值为null 并不是{}<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token comment">// 定义时浏览器不会分配地址</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// 定义时浏览器会分配地址，地址里面没有东西</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>对象方法内的 this 关键字指的是对象本身<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'小白'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span><span class="token function-variable function">say</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="访问对象下的内容"><a href="#访问对象下的内容" class="headerlink" title="访问对象下的内容"></a>访问对象下的内容</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 访问属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>say<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 访问方法</span>obj<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 修改属性值</span>obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'小黑'</span><span class="token comment">// 删除对象的某个属性</span><span class="token keyword">delete</span> obj<span class="token punctuation">.</span>age<span class="token comment">// 以变量的方式访问对象</span><span class="token keyword">const</span> xingming <span class="token operator">=</span> <span class="token string">'name'</span>obj<span class="token punctuation">[</span>xingming<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="对象的存储机制"><a href="#对象的存储机制" class="headerlink" title="对象的存储机制"></a>对象的存储机制</h5><ul><li>js的存储类型：值类型；引用类型 —&gt; 内置对象</li><li>将对象赋值给变量 变量里存的是地址，不是对象的实际内容<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'小张'</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'小张'</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1 <span class="token operator">==</span> obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="（二）数组"><a href="#（二）数组" class="headerlink" title="（二）数组"></a>（二）数组</h4><ul><li>数据的有序集合，数组中的数据是有顺序的， 从 0 开始<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h5 id="数组的属性"><a href="#数组的属性" class="headerlink" title="数组的属性"></a>数组的属性</h5><ul><li><strong>length</strong>:数组的长度(数组项的个数)<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//取数组的最后一项</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h5 id="数组的方法-面试⭐"><a href="#数组的方法-面试⭐" class="headerlink" title="数组的方法 (面试⭐)"></a>数组的方法 (面试⭐)</h5><h6 id="参数不带函数的数组方法"><a href="#参数不带函数的数组方法" class="headerlink" title="参数不带函数的数组方法"></a>参数不带函数的数组方法</h6><ol><li><strong>concat()</strong> 数组的拼接</li></ol><ul><li>数组.concat(数组)</li><li>返回拼接好后的数组</li><li>原数组不变化<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> numArr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">var</span> numArr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token keyword">var</span> resArr <span class="token operator">=</span> numArr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>numArr2<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="2"><li><strong>pop</strong> 删除数组末尾的一项</li></ol><ul><li>数组.pop()</li><li>返回数组被删除的元素</li><li>原数组变化</li></ul><ol start="3"><li><strong>push</strong> 向数组末尾增加一项或多项</li></ol><ul><li>数组.push(项,项,项….)</li><li>返回数组的新长度</li><li>原数组变化<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> len <span class="token operator">=</span> numArr1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span>   <span class="token comment">//len = 4</span><span class="token keyword">var</span> lastItem <span class="token operator">=</span> numArr1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 800</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><ol start="4"><li><strong>shift</strong> 删除数组第一项</li></ol><ul><li>数组.shift()</li><li>返回数组被删除的项</li><li>原数组变化</li></ul><ol start="5"><li><strong>unshift</strong> 向数组开头添加一项或多项</li></ol><ul><li>数组.unshift(项，项，项…)</li><li>返回数组的新长度</li><li>原数组变化</li></ul><ol start="6"><li><strong>splice</strong> 数组增加、删除、替换元素</li></ol><ul><li>数组.splice(a,b,c) a:添加删除替换的开始索引 b:删除的个数 c:以后的参数表示要增加或替换的元素</li><li>返回<strong>被删除的项组成的数组</strong>，如果没删除返回空数组 []</li><li>原数组变化<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> numArr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token keyword">var</span> delNums <span class="token operator">=</span> numArr1<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">// delNums = [3, 4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><ol start="7"><li><strong>slice</strong> 数组的截取</li></ol><ul><li>数组.slice(a,b)  从a开始截取到b之前 slice() 截取所有 slice(a) 从a开始到末尾</li><li><strong>数组截取规则：包括开头不包括结尾</strong></li><li>返回截取的数组</li><li>原数组不变</li><li>此方法一般用于数组的拷贝：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> numArr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token keyword">var</span> newArr1 <span class="token operator">=</span> numArr1<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><ol start="8"><li><strong>includes</strong> 检查数组中是否存在某个值 判断规则：&#x3D;&#x3D;&#x3D;</li></ol><ul><li>数组.includes(值)</li><li>返回 true 或 false</li><li>原数组不变</li></ul><ol start="9"><li><strong>indexOf</strong> 检查数组中是否存在某个值 判断规则：&#x3D;&#x3D;&#x3D;</li></ol><ul><li>数组.indexOf(值) </li><li>存在的话返回对应的索引 不存在返回 -1</li><li>原数组不变</li></ul><ol start="10"><li><strong>reverse</strong> 颠倒数组的顺序</li></ol><ul><li>数组.reverse()</li><li>返回颠倒后的数组</li><li>原数组变化 不希望原数组被颠倒，用数组拷贝见slice()方法</li></ul><ol start="11"><li><strong>join</strong> 将数组中的项按顺序根据提供的字符拼接成字符串</li></ol><ul><li>数组.join(‘拼接符号’) 如果不写参数，<strong>默认拼接字符是 ,</strong></li><li>返回<strong>拼接后的字符串</strong></li><li>原数组不变</li></ul><h6 id="带函数的数组方法"><a href="#带函数的数组方法" class="headerlink" title="带函数的数组方法"></a>带函数的数组方法</h6><ol><li><strong>forEach()</strong> 数组的遍历</li></ol><ul><li>数组.forEach(函数)<br>这个函数function(item,index,array(){}) 带三个参数</li><li>forEach 内的函数，数组中有几项就会执行几次，按顺序执行(item：当前数组项的值，index：当前的下标值，array表示整个数组)</li><li>forEach 与 for 循环的区别：for 循环可以控制退出循环，forEach 不可以<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token string">'item'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token string">'array'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="2"><li><strong>sort</strong> 数组的排序</li></ol><ul><li>数组.sort() 不传参，数字排序的话默认按照最高位的大小排序</li><li>数组.sort(function(a,b){ return  a-b }) a-b：从小到大  b-a：从大到小</li><li>函数内的参数 a，b其实就是数组内相邻的项。 函数体内的 return 后面可以自定义写法 必须满足return的结果是数字的差值计算</li><li>返回排序后的数组</li><li>原数组也排序<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">572</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">]</span><span class="token comment">// 数组从小到大排序</span><span class="token keyword">var</span> sortNumbers <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a <span class="token operator">-</span> b <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><ol start="3"><li><strong>toSorted()</strong></li></ol><ul><li>语法写法和用法同 sort</li></ul><ol start="4"><li><strong>find</strong> 查找数组中满足条件的那一项</li></ol><ul><li>数组.find(function(item,index,array){ return 条件 })</li><li>找到了返回数组中满足条件的那一项， 没找到返回 undefined</li><li>原数组不变<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> students <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'小黑'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'小雪'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'小花'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token keyword">var</span> targetElement <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> item<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'小黑'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>targetElement<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="5"><li><strong>findIndex</strong> 查找数组中满足条件的那一项</li></ol><ul><li>数组.findIndex(function(item,index,array){ return 条件 })</li><li>找到了返回数组中那一项的索引，没找到返回 -1</li><li>原数组不变</li></ul><ol start="6"><li><strong>some</strong> 检查数组中的元素是否存在满足条件的</li></ol><ul><li>数组.some(function(item,index,array){ return 条件 })</li><li>存在返回 true， 不存在返回 false</li><li>原数组不变<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> isHas18 <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> item<span class="token punctuation">.</span>age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isHas18<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//flase</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="7"><li><strong>every</strong> 检查数组中的每一个元素是否都满足条件的</li></ol><ul><li>数组.every(function(item,index,array){ return 条件 })</li><li>都满足返回 true 否则 false</li><li>原数组不变<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> isAll18 <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">student</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> student<span class="token punctuation">.</span>age <span class="token operator">></span> <span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isAll18<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="8"><li><strong>filter</strong> 筛选数组中满足条件的元素</li></ol><ul><li>数组.filter(function(item,index,array){ return 条件 })</li><li>返回<strong>满足条件的元素组成的数组</strong></li><li>原数组不变</li></ul><ol start="9"><li><strong>map</strong> 数组的映射</li></ol><ul><li>数组.map(function(item,index,array){ return 映射规则 })</li><li>返回映射后的新数组</li><li>原数组不变<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> numbers1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token keyword">var</span> newNumbers1 <span class="token operator">=</span> numbers1<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> item <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//[2, 4, 6]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newNumbers1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//[4, 8, 12]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="10"><li><strong>flat</strong>  多维数组降维，括号从外往里降</li></ol><ul><li>flat(n)</li><li>返回降维后的数组</li><li>原数组不变</li></ul><ol start="11"><li><strong>reduce</strong> 万能的函数 (面试重点⭐)<br>是 JS 中的高阶函数，对数组中的每个元素进行累积操作，最终返回一个单一的值<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">数组<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span>item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>res初始值<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>原数组不变</li><li>reduce 内的函数每次必须返回一个值，该值会被当作下一次 res 的初始值</li><li>当 reduce 执行完毕的时候，最后一次的 return 就是 reduce 方法的返回值<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 数组求和</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">var</span> count <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>res <span class="token operator">+=</span> item<span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>##### <span class="token function">数组的静态方法</span><span class="token punctuation">(</span>面试会问涉及⭐<span class="token punctuation">)</span><span class="token operator">-</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>值<span class="token punctuation">)</span><span class="token operator">-</span> 判断值是否是数组<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>`js<span class="token keyword">var</span> val <span class="token operator">=</span> <span class="token string">'hello'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="（三）数学对象-Math"><a href="#（三）数学对象-Math" class="headerlink" title="（三）数学对象 Math"></a>（三）数学对象 Math</h4><ol><li>上进 <strong>Math.ceil(值)</strong></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">3.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>下舍 <strong>Math.floor(值)</strong><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">3.9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>四舍五入 <strong>Math.round(值)</strong><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">3.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><strong>Math.random()</strong></li></ol><ul><li>Math.random() 产生 0 到 1的随机数，不包括0 和 1</li></ul><ol start="5"><li><strong>Math.PI</strong></li></ol><ul><li>派。3.14159</li></ul><ol start="6"><li><strong>Math.abs()</strong></li></ol><ul><li>绝对值</li></ul><h4 id="（四）日期对象-Date"><a href="#（四）日期对象-Date" class="headerlink" title="（四）日期对象 Date"></a>（四）日期对象 Date</h4><ul><li>创建当前日期的日期对象<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span> 年<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">jsconsole.log(date.getFullYear())- 月- 从 0 开始</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>jsconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span> 日<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">jsconsole.log(date.getDate())- 星期- 0 - 6  0周日， 1周一</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>jsconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span> 小时<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">jsconsole.log(date.getHours())- 分钟</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>jsconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span> 秒<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">jsconsole.log(date.getSeconds())- 毫秒</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>jsconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span> 上述所有的方法加上 <span class="token constant">UDF</span> 获取的是世界时间。 比如<span class="token operator">:</span> getUDFHours 中国是东八区#### （五）正则表达式 RegExp##### 普通正则创建<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>`js<span class="token keyword">var</span> re1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>   <span class="token comment">// 包含一位小写字母a。g表示全局</span><span class="token keyword">var</span> re2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">ab</span><span class="token regex-delimiter">/</span></span>  <span class="token comment">// 包含两位连续的小写字母ab</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="带变量的正则创建"><a href="#带变量的正则创建" class="headerlink" title="带变量的正则创建"></a>带变量的正则创建</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> re1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[0-9]</span><span class="token regex-delimiter">/</span></span><span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'[0-9]'</span><span class="token operator">+</span>re1<span class="token punctuation">,</span>g<span class="token punctuation">)</span><span class="token comment">// 第二个参数表示 re 是全局的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="正则的规则"><a href="#正则的规则" class="headerlink" title="正则的规则"></a>正则的规则</h5><ul><li>[] 包含方括号中的一个字符<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> res3 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[abc]</span><span class="token regex-delimiter">/</span></span>  <span class="token comment">//包含一位小写字母 a 或 b 或 c</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>[^xxx ] 一位非xxx</li><li>{} 前面一位字符重复的个数</li><li>{n} 前面一个字符n个</li><li>{n,m} 前面一个字符n-m个</li><li>{n,} 前面一个字符大于等于n个</li><li>[0-9] 任意一位数字</li><li>[a-z] 任意一位小写字符</li><li>[A-Z] 任意一位大写字母</li><li>[\u4e00-u9fa5] 任意简体汉字</li><li>\d 任意一位数字   \s 一位空白符(空格) \w 一位数字字母下划线</li><li>\D 任意一位非数字 \S 一位非空白符(空格) \W 一位非数字字母下划线</li><li>\n n表示数字，表示跟第几个分组的匹配一模一样的字符<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> re4 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([0-9])\1&#123;1,&#125;</span><span class="token regex-delimiter">/</span></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re11<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>^开头  $结尾</li><li>| 或者 ()分组</li><li>. 表示任意一位字符  \ 转义符 当要检测的内容时正则的规则语法时。例:\ . 的意思就是包含. 而不是任意字符</li><li>x(?&#x3D;y) x字符后面紧跟着是不是y</li></ul><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><ul><li><strong>test(值)</strong></li><li>检测字符串是否符合正则规则  符合返回 true 否则返回 false</li><li><strong>exec(值)</strong></li><li>返回符合正则规则的项组成的数组和它的下标</li></ul><h4 id="（六）字符串对象"><a href="#（六）字符串对象" class="headerlink" title="（六）字符串对象"></a>（六）字符串对象</h4><h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><ul><li><strong>length</strong> 获取字符串的长度</li></ul><h5 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h5><ol><li><strong>includes()</strong></li></ol><ul><li>字符串中是否包含某个字串</li><li>返回true 或 false<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'hello'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'h'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><ol start="2"><li><strong>indexOf()</strong></li></ol><ul><li>返回匹配到的字符索引位置,未找到返回 -1</li></ul><ol start="3"><li><strong>charAt()</strong></li></ol><ul><li>获取对应索引位置的字符<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'hello'</span>connsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 'e'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><ol start="4"><li><strong>replace()</strong></li></ol><ul><li>替换规则：<strong>只替换一次</strong> 可以直接写字符串 也可以写正则。</li><li>原字符串不变<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'hello'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'t'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 'hetlo'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><ol start="5"><li><strong>replaceAll</strong></li></ol><ul><li>替换规则：<strong>替换全部</strong> 可以直接写字符串 也可以写正则,<strong>正则需要加全局标识g</strong></li><li>原字符串不变<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'hello'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">l</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">'t'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 'hetto'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><ol start="6"><li><strong>slice()</strong></li></ol><ul><li>截取字符串 包前不包后</li></ul><ol start="7"><li><strong>split()</strong></li></ol><ul><li>根据提供的参数将字符串拆分成数组  和数组的 join() 搭配使用</li></ul><ol start="8"><li><strong>toLowerCase()</strong>  字符串转小写 原字符串不改变</li><li><strong>toUpperCase()</strong>  字符串转大写 原字符串不改变</li><li><strong>trim()</strong>  去掉字符串前后的空格 原字符串不变</li><li><strong>trimStart()</strong> 去掉字符串前面的空格</li><li><strong>strimEnd()</strong>  去掉字符串后面的空格</li><li><strong>match()</strong></li></ol><ul><li>返回匹配正则的字符串组成的数组 <strong>正则后面需要加全局标识</strong><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string">'hello world'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">l</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h4 id="（七）数字"><a href="#（七）数字" class="headerlink" title="（七）数字"></a>（七）数字</h4><h5 id="数字的方法"><a href="#数字的方法" class="headerlink" title="数字的方法"></a>数字的方法</h5><ul><li><strong>isNaN()</strong></li><li>Number.isNaN()</li><li><strong>isFinite()</strong> 是否是有穷数</li><li>js 数值展示有最大和最小值，超出范围显示 Infinity<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">3.1415</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isFinite</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>js 内浮点型数值计算的时候会出现误差</li><li><strong>toFixed(n)</strong></li><li>将数组四舍五入转化为对应小数位的字符串</li><li>只要遇到浮点型运算，必须用toFixed()<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token operator">+</span><span class="token number">0.2</span><span class="token punctuation">)</span>   <span class="token comment">// 0.3000000000009</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.3</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span>     <span class="token comment">// 0.8999999999999</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><ul><li>setInterval(function(){},1000)</li><li>setInterval(提前定义好的函数的函数名,1000)  <strong>函数名不能带()</strong></li><li>每过一段时间执行前面的函数</li><li>clearInterval(timer)</li><li>停掉 setInterval 的返回值<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>setTimeout(function(){},1000)</li><li>延迟执行，只执行一次</li><li>clearTimeout(timer1)</li><li>停掉 setTimeout 的返回值<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> timer1 <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1111</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a><strong>同步和异步</strong></h4><ul><li>同等级别下，同步永远优先于异步执行</li><li>同步阻塞(执行完上面才可以执行下面)，异步不阻塞</li><li>setInterval 和 setTimeout 是异步执行的<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 先执行for循环，遇到setTimeout函数异步执行会等待，然后再继续执行for。第二次遇到setTimeout再等待，直到执行完for循环，最后隔1s输出三个3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="js-进阶知识"><a href="#js-进阶知识" class="headerlink" title="js 进阶知识"></a>js 进阶知识</h2><h3 id="一、数组进阶"><a href="#一、数组进阶" class="headerlink" title="一、数组进阶"></a>一、数组进阶</h3><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><ul><li>冒泡排序</li><li>快速排序</li><li>选择排序</li></ul><h4 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h4><ul><li>利用新数组，往新数组中push数据，依次遍历，如果存在了就不再 push 了</li><li>利用对象(时间复杂度小)</li><li>想要用变量去访问对象 需要用 对象名[变量名] 去访问</li><li>Set 数据类型转换，再用拓展运算符…展开，用[]包住</li></ul><h4 id="Tree-结构扁平化"><a href="#Tree-结构扁平化" class="headerlink" title="Tree 结构扁平化"></a>Tree 结构扁平化</h4><h4 id="数组的拷贝-slice-map-filter"><a href="#数组的拷贝-slice-map-filter" class="headerlink" title="数组的拷贝  slice()  map()  filter()"></a>数组的拷贝  slice()  map()  filter()</h4><h3 id="二、函数进阶"><a href="#二、函数进阶" class="headerlink" title="二、函数进阶"></a>二、函数进阶</h3><h4 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h4><ul><li>函数的参数是函数  参数函数叫回调函数f</li></ul><h4 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h4><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p>函数里面套函数，在内层函数中可以访问到外层函数的作用域</p><ul><li>父作用域内定义的内容，一直被存储在浏览器中，任何时候子作用域都可以访问</li></ul><h4 id="匿名函数立即执行"><a href="#匿名函数立即执行" class="headerlink" title="匿名函数立即执行"></a>匿名函数立即执行</h4><ul><li>作用：封装作用域，可以封装一些临时变量或者局部变量。避免污染全局环境</li><li>匿名函数立即执行<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chajian<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><ul><li>构造函数创建时，函数名首字母大写</li><li>插件内可以用 window.$ &#x3D; $ 暴露变量。例如jquery 里面的 $</li><li>构造函数创建出来的对象叫 <strong>构造函数的实例</strong>(任何的对象都有一个 __proto 属性，叫<strong>原型对象</strong>)</li><li>每个实例对象内有一个<strong>原型对象</strong> _<em>proto</em>_</li><li>原型对象下有一个 constructor 属性，属性的属性值是构造函数本身<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">CreateStudent</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">&#125;</span><span class="token keyword">var</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateStudent</span><span class="token punctuation">(</span><span class="token string">'小王'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="构造函数执行机制-new-关键字干了什么-面试重点⭐"><a href="#构造函数执行机制-new-关键字干了什么-面试重点⭐" class="headerlink" title="构造函数执行机制 new 关键字干了什么(面试重点⭐)"></a>构造函数执行机制 new 关键字干了什么(面试重点⭐)</h5><ol><li>创建一个空对象 {}</li><li>将构造函数赋值给空对象下的 _<em>proto</em>_ 的 constructor 属性</li><li>将构造函数内的 this 指向上面的空对象</li><li>执行函数体</li><li>将对象当作返回值返回</li></ol><h5 id="构造函数的实例内的原型对象"><a href="#构造函数的实例内的原型对象" class="headerlink" title="构造函数的实例内的原型对象"></a>构造函数的实例内的原型对象</h5><ul><li>构造函数有一个 prototype 属性。该属性的值是一个对象 叫原型对象。跟对象实例下的 _<em>proto</em>_ 是一个东西</li><li>构造函数创建出来的实例对象，除了拥有构造函数体内的属性和方法，也拥有原型对象的属性和方法<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">CreateStudent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'手机'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h5 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h5><p>原型对象下也可能有原型</p><ul><li>链路上的 _<em>proto</em>_ 下的所有属性和方法 对象都可以访问</li><li>最后一个 _<em>proto</em>_ 是 js 内置的 Object 的原型对象。 他的 _<em>proto</em>_ 的值是 null</li></ul><h4 id="函数内-this-的指向"><a href="#函数内-this-的指向" class="headerlink" title="函数内 this 的指向"></a>函数内 this 的指向</h4><ul><li>函数调用的时候 函数内的 this 会去找指向；定义的时候不会去找</li><li>函数内的 this 指向的就是调用函数的对象，如果没有对象调用就是全局对象 window 调用的</li><li>bind call apply 替换函数的 this 指向</li><li>bind 根据原函数生成新函数（跟原函数一模一样）并且固定函数内 this 的指向</li><li>call 函数调用时临时替换 this 的指向 传参的话依次写在后面即可</li><li>apply 函数调用时临时替换 this 的指向 <strong>传参是数组</strong>，将所有参数放在数组中，传递在后面<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- button.onclick(function()&#123;   // onclick 实际上是一个函数this                            // onclick 内隐藏的thishandleClick()&#125;) --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">handleClick</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>点击事件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 获取数组中最大或最小值</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">452</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">345</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">346</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">6536</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="函数内的关键字-arguments"><a href="#函数内的关键字-arguments" class="headerlink" title="函数内的关键字 arguments"></a>函数内的关键字 arguments</h4><ul><li><strong>arguments</strong> 表示实参集合 是类数组 可以通过 [索引] 访问；也有 length 属性</li><li>Array.prototype.slice.call()<br>将 arguments 类数组转换成数组<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fun3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 将类数组转成数组</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>count <span class="token operator">+=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> count<span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fun3</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'总和'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="三、对象进阶"><a href="#三、对象进阶" class="headerlink" title="三、对象进阶"></a>三、对象进阶</h3><h4 id="window-对象进阶-默认的全局对象"><a href="#window-对象进阶-默认的全局对象" class="headerlink" title="window 对象进阶  默认的全局对象"></a>window 对象进阶  默认的全局对象</h4><ul><li>我们创建的全局变量和函数都相当于 window 下的</li></ul><h5 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h5><ul><li><strong>window.innerWidth innerHeight outerWidth outerHeight</strong></li><li><strong>scrollX scrollY</strong><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>scrollY<span class="token punctuation">)</span>  <span class="token comment">// 获取滚动条纵向距离顶部的距离</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><strong>window.location</strong> 页面地址栏相关信息</li><li>location 既是 window 下的属性，也是 document 下的属性</li></ul><ol><li>href 整个地址<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">"https://baidu.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>protocol 协议</li><li>host || hostname 域名</li><li>port 端口号</li><li>pathname  路径名</li><li>search  查询部分 ？后面</li><li>hash 锚点部分 #后面</li></ol><ul><li><strong>history</strong> 历史记录相关信息<br>这个属性的属性值是对象</li><li>length 历史记录的长度</li><li>forward() 前进，会覆盖当前页面</li><li>back() 返回上一个历史界面，会覆盖当前页面</li><li>go() 以当前页面为起点，去任意历史界面，会覆盖当前页面<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 访问了 1 2 3 4 5 界面</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">// 当前第3页面，跳转到第5页面</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 当前第5页面，跳转到第4页面</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><strong>navigator</strong> 浏览器信息，检测浏览器并返回浏览器名称字符串</li><li><strong>screen</strong> 获取屏幕信息</li></ul><h5 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h5><ul><li><strong>open()</strong> 在新的标签页打开另一个页面<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> myWindow <span class="token operator">=</span> <span class="token string">''</span><span class="token comment">// 给了第二个参数名字之后，只会打开一个</span>mywindow <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">,</span> <span class="token string">'baidu'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><strong>close()</strong><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// window.close()     关闭当前标签页</span>mywindow<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 关闭 mywindow 标签页</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>弹窗</li><li>aleart</li><li>prompt</li><li>confirm</li><li><strong>print()</strong> 打印</li><li><strong>scrollTo(x,y)</strong> 控制浏览器滚动条滚动到某个位置<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// window.scrollTo(0, 0)  scrollTo(x,y)</span>window<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token literal-property property">behavior</span><span class="token operator">:</span> <span class="token string">"smooth"</span>  <span class="token comment">// 滚动回去</span><span class="token string">"instant"</span> <span class="token comment">// 直接跳转到目标位置</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><strong>requestAnimationFrame()</strong> 重绘动画窗体<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.animate'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">function</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>num<span class="token operator">++</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'transform'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">translateX(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>num<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">px)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>move<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>move<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><strong>postMessage</strong> 多页面之间的数据传递</li><li>目标窗口.postMessage(message,targetOrigin)</li><li>message 要发送的消息</li><li>targetOrigin 目标源<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> window1 <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'./window1.html'</span><span class="token punctuation">,</span><span class="token string">'window1'</span><span class="token punctuation">)</span>window1<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">'hello,你好'</span><span class="token punctuation">,</span> <span class="token string">'http://localhost:3000'</span><span class="token punctuation">)</span><span class="token comment">//                  要发送的消息    目标源</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><strong>addEventListener</strong> 接收信息端需要加事件监听器</li><li>event.origin  信息的源地址</li><li>event.data    发来的数据<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// event.origin  是信息的源地址</span><span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>origin <span class="token operator">!=</span> <span class="token string">'http://localhost:3000'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token comment">// event.data  是发送来的数据</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><strong>getComputedStyle(标签)</strong> 返回一个对象的所有样式</li><li>window.getComputedStyle(‘body’).width</li></ul><h5 id="浏览器的本地存储"><a href="#浏览器的本地存储" class="headerlink" title="浏览器的本地存储"></a>浏览器的本地存储</h5><p><strong>只能存储字符串</strong>，需要用JSON方法进行转换。按域名存储页面信息<br><strong>localStorage</strong>：  本地存储，关闭页面存储还在<br><strong>sessionStorage</strong>：  会话存储，关闭页面自动清除存储</p><ul><li><strong>setItem(key,value)</strong> 添加一个</li><li><strong>getItem(key)</strong> 获取对应的value</li><li><strong>removeItem(key)</strong> 删除一个</li><li><strong>clear()</strong> 清空所有<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span>sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">,</span> <span class="token string">'hahahaha123haha'</span><span class="token punctuation">)</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>window<span class="token punctuation">.</span>sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h5><ul><li><strong>JSON.stringify()</strong>  对象转换为文本</li><li>{name: ‘1’,age: 20} –&gt; ‘{“name”:”1”,”age”:20}’</li><li><strong>JSON.parse()</strong>  文本转换为原样</li></ul><h4 id="普通对象进阶"><a href="#普通对象进阶" class="headerlink" title="普通对象进阶"></a>普通对象进阶</h4><h5 id="对象的拷贝"><a href="#对象的拷贝" class="headerlink" title="对象的拷贝"></a>对象的拷贝</h5><ul><li>Object.assign({},obj,obj1,….)</li><li>JSON.parse(JSON.stringify(obj))</li></ul><h5 id="对象的合并"><a href="#对象的合并" class="headerlink" title="对象的合并"></a>对象的合并</h5><ul><li>Object.assign(obj,obj1,obj2,….)</li></ul><h5 id="对象的循环"><a href="#对象的循环" class="headerlink" title="对象的循环"></a>对象的循环</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token comment">// 变量的方式访问对象的值</span><span class="token comment">// 用变量的方式访问对象用[]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="获取对象属性名集合数组"><a href="#获取对象属性名集合数组" class="headerlink" title="获取对象属性名集合数组"></a>获取对象属性名集合数组</h5><ul><li><strong>Object.keys(obj)</strong>  返回一个数组</li></ul><h5 id="获取对象属性值集合数组"><a href="#获取对象属性值集合数组" class="headerlink" title="获取对象属性值集合数组"></a>获取对象属性值集合数组</h5><ul><li><strong>Object.values(obj)</strong>  返回一个数组</li></ul><h5 id="定义对象的属性"><a href="#定义对象的属性" class="headerlink" title="定义对象的属性"></a>定义对象的属性</h5><ul><li>**Object.defineProperty(对象名，属性名，{描述对象})</li></ul><h5 id="对象的属性描述"><a href="#对象的属性描述" class="headerlink" title="对象的属性描述"></a>对象的属性描述</h5><ol><li>数据描述符</li></ol><ul><li>value           属性值</li><li>writeable       是否可以被 &#x3D; 赋值修改 默认是false</li><li>enumerable      是否可以被枚举 默认是false</li><li>configurable    是否可以被修改或删除 默认是false<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'秦皇岛'</span><span class="token punctuation">,</span><span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>user<span class="token punctuation">.</span>address <span class="token operator">=</span> <span class="token string">'河北'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><strong>Object.prototype.hasOwnProperty</strong>检测 user 的 toString 属性是不是 user 本身的。要排除是不是继承<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">'toString'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">'toString'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><ol start="2"><li>存储描述符</li></ol><ul><li>get   是一个函数，获取属性值</li><li>set   是一个函数，修改属性值</li><li>enumerable</li><li>configurable<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> address <span class="token operator">=</span> <span class="token string">'上海'</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> address<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>address <span class="token operator">=</span> value<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>user<span class="token punctuation">.</span>address <span class="token operator">=</span> <span class="token string">'石家庄'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="document-进阶知识"><a href="#document-进阶知识" class="headerlink" title="document 进阶知识"></a>document 进阶知识</h3><ul><li>整个 document 分为标签节点、属性节点、文本节点</li></ul><h4 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h4><ul><li><strong>document.getElmentById()</strong></li><li><strong>document.getElmentsByClassName()</strong> 返回类数组</li><li><strong>document.getElmentsByTagName()</strong>   返回类数组</li><li><strong>document.querySelector()</strong>  找一个</li><li><strong>document.querySelectorAll()</strong> 找多个，返回数组</li></ul><h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><ul><li><strong>onmouseenter onmouseleave onmouseremove onmousedown onmouseup onclick ondblclick onkeydown onkeyup onkeypress onfocus onblur onchange oninput onscroll</strong></li><li>元素.onclick &#x3D; function(){}<br>事件对象</li><li>真正的函数才有事件对象 event</li><li><strong>event.preventDefault()</strong>  阻止默认行为</li><li><strong>event.pageX event.pageY</strong> 获取鼠标相对于页面的距离</li><li><strong>event.offsetX event.offsetY</strong> 获取鼠标相对于自身位置的坐标偏移<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.btn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 阻止默认行为</span><span class="token comment">// event.pageX pageY 获取鼠标相对于页面左侧和顶部的距离</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>pageX<span class="token punctuation">,</span> event<span class="token punctuation">.</span>pageY<span class="token punctuation">)</span><span class="token comment">// event.offsetX offsetY 相对于自身位置的坐标偏移 左上角是 0 0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>offsetX<span class="token punctuation">,</span> event<span class="token punctuation">.</span>offsetY<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* onclick 属性本身就是一个函数onclick = function(event)&#123;handleClick.bind(this)(event)handleClick.call(this,event) handleClick.apply(this,[event])&#125;*/</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span> onclick<span class="token operator">=</span><span class="token string">'handleClick.call(this,event)'</span><span class="token operator">></span>按钮<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'点击按钮事件触发'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="原生样式修改"><a href="#原生样式修改" class="headerlink" title="原生样式修改"></a>原生样式修改</h4><h5 id="classList"><a href="#classList" class="headerlink" title="classList"></a>classList</h5><ul><li>元素.classList 获取当前元素的 class 列表</li><li>add() 添加</li><li>remove() 删除</li><li>contain() 包含</li><li>toggle()  切换。没有添加，有就删除</li></ul><h5 id="style"><a href="#style" class="headerlink" title="style"></a>style</h5><ul><li>document.querySelector(‘.box’).style.backgroundColor &#x3D; ‘#000’</li><li>style 属性是一个对象，里面有各种样式</li><li>document.querySelector(‘.box’).style[‘color’] &#x3D; ‘red’</li></ul><h5 id="获取修改属性值"><a href="#获取修改属性值" class="headerlink" title="获取修改属性值"></a>获取修改属性值</h5><ol><li>普通元素属性设置</li></ol><ul><li><strong>getAttribute(‘属性名’)</strong> 获取某属性的值</li><li><strong>setAttribute(‘属性名’,’属性值’)</strong> 设置属性的属性值</li><li>document.querySelector(‘.pic’).setAttribute(‘src’, ‘.&#x2F;img1&#x2F;jpg’)</li></ul><ol start="2"><li><strong>表单元素的属性获取修改</strong></li></ol><ul><li>直接  <strong>元素.value .type .id .checked</strong>  修改或获取</li></ul><h5 id="获取或者修改内容"><a href="#获取或者修改内容" class="headerlink" title="获取或者修改内容"></a>获取或者修改内容</h5><ul><li>元素.innerText &#x3D; ‘’</li><li>元素.innerHTML &#x3D; ‘’  修改元素内的标签内容</li></ul><h5 id="元素的创建、添加、删除"><a href="#元素的创建、添加、删除" class="headerlink" title="元素的创建、添加、删除"></a>元素的创建、添加、删除</h5><ul><li>创建</li><li>document.createElement(‘标签名’)</li><li>元素.innerHTML &#x3D; &#96;&#96;</li><li>添加</li><li>append()  在末尾添加</li><li>prepend() 在首部添加</li><li>insertBefore(node,child) 在某节点前插入</li><li>删除</li><li>元素.remove()</li><li>父元素.removeChild(子元素)</li><li>查找</li><li>document.querySelector(‘选择器’)</li><li>document.querySelectorAll(‘选择器’)</li><li>元素.parentNode 查父级节点</li><li>元素.previousElementSibling 前面的兄弟元素</li><li>元素.nextElementSibling 下一个兄弟元素</li></ul><h4 id="事件冒泡机制"><a href="#事件冒泡机制" class="headerlink" title="事件冒泡机制"></a>事件冒泡机制</h4><ul><li>事件委托 可以用来给新增的元素绑定事件</li><li>将事件委托出去 受委托人：页面上不会消失的东西 必须是上下级关系（祖先）<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.todo-content'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token comment">// event.target 拿到真正点的是谁</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>见 06.20&#x2F;event.html 06.20&#x2F;todo.html</li></ul><h4 id="设置输入框光标位置"><a href="#设置输入框光标位置" class="headerlink" title="设置输入框光标位置"></a>设置输入框光标位置</h4><ul><li>设置选择范围</li><li><strong>setSelectionRange(start,end)</strong> input 和 textarea 的光标选择的起始位置和结束位置</li><li>默认让输入框获得焦点</li><li>input 标签的 aotufocus 属性</li><li>dom找到当前标签，用 focus() 方法</li></ul><h2 id="ES6基础-ECMAScript"><a href="#ES6基础-ECMAScript" class="headerlink" title="ES6基础  ECMAScript"></a>ES6基础  ECMAScript</h2><p>ES6 的新增功能</p><h3 id="1-let-const-使用"><a href="#1-let-const-使用" class="headerlink" title="1.let  const 使用"></a>1.let  const 使用</h3><ul><li><p>拥有块级作用域，一对花括号就是一个块级作用域</p></li><li><p>不允许重复声明</p></li><li><p>没有变量声明提升机制</p></li><li><p>const 声明常量，不能重新赋值 变量名大写</p></li><li><p>for 循环每循环一次就创建一个块级作用域</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 一秒后输出0 1 2 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2-解构赋值"><a href="#2-解构赋值" class="headerlink" title="2.解构赋值"></a>2.解构赋值</h3><p>从数组或对象中提取值，对变量进行赋值<br>解构赋值的默认值：可以在解构变量后面用 &#x3D; 设置默认值</p><ul><li>a.<strong>对象的解构赋值</strong><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'小黑'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token comment">// 对象的解构赋值，解构的名字要和对象的属性名一样。用 : 可以改名字</span><span class="token comment">// 默认值的设置，用 = </span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span>username <span class="token operator">=</span> <span class="token string">'用户'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span>nianling<span class="token punctuation">&#125;</span> <span class="token operator">=</span> objconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>nianling<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>b.<strong>数组的解构赋值</strong><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">const</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token comment">// const [a,undefined,c] = arr</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span>  <span class="token comment">// 1,2,3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>c.<strong>字符串的解构赋值</strong><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token keyword">const</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">]</span> <span class="token operator">=</span> str<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>d.<strong>函数的解构赋值</strong><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'小黑'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">showName</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">showName</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-模板字符串-搭配-变量名"><a href="#3-模板字符串-搭配-变量名" class="headerlink" title="3.模板字符串 &#96;&#96; 搭配 ${变量名}"></a>3.模板字符串 &#96;&#96; 搭配 ${变量名}</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> keyWord <span class="token operator">=</span> <span class="token string">'hello'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">我的关键字是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>kewWord<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-BigInt-大整型数据类型"><a href="#4-BigInt-大整型数据类型" class="headerlink" title="4.BigInt 大整型数据类型"></a>4.BigInt 大整型数据类型</h3><p>在声明时的<strong>数值后面加一个 n</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">123n</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> num<span class="token punctuation">)</span>     <span class="token comment">// bigint</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-函数的扩展"><a href="#5-函数的扩展" class="headerlink" title="5.函数的扩展"></a>5.函数的扩展</h3><ul><li>a. <strong>函数参数的默认值</strong><br>不传实参或者传递的是 undefined 时，函数参数的默认值生效<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token string">'默认值'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment">// 默认值  相当于传了个 undefined</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span>    <span class="token comment">// 默认值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>b. <strong>剩余参数 rest</strong><br>写法：<code>...变量名</code>。 是一个数组，只能写在形参的最后一个<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span><span class="token operator">...</span>rest</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>       <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span>    <span class="token comment">// [2,3,4]</span><span class="token punctuation">&#125;</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>c.<strong>箭头函数</strong><br>箭头函数的写法</li><li>箭头的左边的参数部分</li><li>正常 (参数1,…)</li><li>单参 参数</li><li>无参 ()</li><li>箭头的右边的函数体</li><li>{函数体内容}</li><li>直接写值，相当于直接设置返回值。当函数想直接返回一个对象的话({key:value})<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a<span class="token operator">+</span>b<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">// 直接返回一个对象写法</span><span class="token keyword">const</span> <span class="token function-variable function">testFun</span> <span class="token operator">=</span> <span class="token parameter">name</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">testFun</span><span class="token punctuation">(</span><span class="token string">'小白'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token keyword">const</span> jishuArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jishuArr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>箭头函数注意3点</li><li>1.箭头函数没有自己的 this 对象。 箭头函数对象内的 this <strong>在创建函数的时候就已经绑定好了</strong>不会改变，<strong>绑定的是上层作用域中的 this</strong></li><li>2.箭头函数内不能使用 arguments 关键字，可以用 rest 剩余参数</li><li>3.箭头函数不能当作构造函数，不能 new,没有原型对象 prototype<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token comment">// this 指的是上层作用域中this的指向 Ainmal</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'小猫'</span><span class="token punctuation">)</span>cat<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="6-对象属性的简洁表示法"><a href="#6-对象属性的简洁表示法" class="headerlink" title="6.对象属性的简洁表示法"></a>6.对象属性的简洁表示法</h3><p>当对象的属性名和属性值一致时可以使用对象属性的简洁表示法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'小黑'</span><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span>age<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-扩展运算符-展开运算符-…"><a href="#7-扩展运算符-展开运算符-…" class="headerlink" title="7.扩展运算符&#x2F;展开运算符  …"></a>7.扩展运算符&#x2F;展开运算符  …</h3><p>功能：快速的拷贝一个对象或者数组（深拷贝）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 拷贝对象</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'小花'</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> objCopy <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>obj<span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token operator">===</span> objCopy<span class="token punctuation">)</span>   <span class="token comment">// false</span><span class="token comment">// 拷贝数组</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">const</span> arrCopy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-运算符的扩展"><a href="#8-运算符的扩展" class="headerlink" title="8.运算符的扩展"></a>8.运算符的扩展</h3><ul><li>a.<strong>链判断运算符</strong><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'小兰'</span>，<span class="token literal-property property">address</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token literal-property property">city</span><span class="token operator">:</span><span class="token string">'北京'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> city <span class="token operator">=</span> user<span class="token operator">?.</span>address<span class="token operator">?.</span>cityconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>city<span class="token punctuation">)</span>  <span class="token comment">// 北京  如果 city 不存在，返回 undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>b.<strong>null 判断运算符 ??</strong><br>主要判断 undefined 和 null，如果是的话执行后面的<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result <span class="token operator">??</span> <span class="token string">'默认值'</span><span class="token punctuation">)</span><span class="token comment">// 接上一个代码模块</span><span class="token keyword">const</span> city <span class="token operator">=</span> user<span class="token operator">?.</span>address<span class="token operator">?.</span>city <span class="token operator">??</span> <span class="token string">'石家庄'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="9-symbol-数据类型"><a href="#9-symbol-数据类型" class="headerlink" title="9.symbol 数据类型"></a>9.symbol 数据类型</h3><p>创建一个独一无二的数据。从根本上防止对象的属性名冲突</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> symbolValue <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token keyword">const</span> symbolValue1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>  <span class="token comment">// 与上面的 symbolValue 也不同</span><span class="token comment">// 对象[变量]访问方式：把变量解析为变量的值当作对象的属性名来访问</span>obj<span class="token punctuation">[</span>symbolValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'200'</span>obj<span class="token punctuation">[</span>symbolValue1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'200'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-Set-数据类型"><a href="#10-Set-数据类型" class="headerlink" title="10. Set 数据类型"></a>10. Set 数据类型</h3><p>集合。类数组，可以用作数组、字符串的去重</p><ul><li><strong>size 属性</strong>：获取 set 的长度大小</li><li><strong>add()</strong>: 添加元素</li><li><strong>delete()</strong>: 删除元素</li><li><strong>clear()</strong><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token keyword">const</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>set<span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="11-Map-数据类型"><a href="#11-Map-数据类型" class="headerlink" title="11. Map 数据类型"></a>11. Map 数据类型</h3><p>字典。有序的键值对。类对象，key 可以是汉字也可以是数组或对象</p><ul><li><strong>set(key,value)方法</strong>：设置键值对</li><li><strong>get(key)方法</strong>：获取对应的 value<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> typeMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>typeMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'能源'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">typeName</span><span class="token operator">:</span> <span class="token string">'电'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>typeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'能源'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="12-Promise-内置函数-异步编程的解决方案"><a href="#12-Promise-内置函数-异步编程的解决方案" class="headerlink" title="12. Promise 内置函数  异步编程的解决方案"></a>12. Promise 内置函数  异步编程的解决方案</h3><p>简单的说是一个容器，里面保存着异步操作的结果<br>三种状态：pending（进行中），fulfilled（已成功），reject（已失败）</p><ul><li><strong>Promise.then() 的应用：axios 的 ajax 请求中的then()</strong><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">getPosts</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3008/posts'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3008/users'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">getPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><strong>Promise.then()</strong><br>Promise() 构造函数中的 resolve 和 reject 参数是两个函数<br>resolve 是指 fulfilled 状态， reject 是请求失败<br>promise().then() 相当于请求成功要执行的部分<br>catch() 相当于请求失败执行的部分<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">promise</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token comment">// resolve 和 reject 的参数是两个函数</span><span class="token comment">// new 创建Promise 对象的时候会自动执行函数体，一般都是 return 一个 Promise 函数</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token function">setTimout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'异步完成'</span><span class="token punctuation">)</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token function">resolve</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>  <span class="token comment">// arr 是实参</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 一般请求都会成功。所以 then() 函数的参数会传给 resolve 这个函数形参</span><span class="token comment">// 请求成功传给 resolve 失败传给 reject</span><span class="token function">promise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'异步完成之后做的事情'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><strong>Promise.all()</strong><br>Promise.all()的参数是一个数组，数组的每一个成员都是 Promise 实例化对象，数组的每一项呗执行完之后再执行 then 部分<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">$get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3008/posts'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">$get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3008/user'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="13-async-函数-await"><a href="#13-async-函数-await" class="headerlink" title="13.async 函数  await"></a>13.async 函数  await</h3><p>1.把异步变成同步<br>2.拿到 resolve 的返回值</p><ul><li>async 函数搭配 await</li><li>await 所处的函数必须用 async 声明</li><li>await 后面只能跟 Promise 实例化对象</li><li>await 函数默认会返回 Promise 实例化对象<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">getPosts</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">$get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3008/posts'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是后执行的'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">init</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">await</span> <span class="token function">getPosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求都完事了，干点别的吧'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="14-class-类"><a href="#14-class-类" class="headerlink" title="14. class 类"></a>14. class 类</h3><ul><li>构造函数的另一种写法</li><li>类名首字母大写</li><li>class 里面必须写构造器 constructor</li><li>类的继承 extends 关键字</li><li>super 代表父类的构造函数<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">&#123;</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">&#125;</span><span class="token comment">// 除 constructor 之外都相当于原型 __proto__ 内的</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hi,我是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> people <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">)</span>people<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 继承 extends</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">People</span> <span class="token punctuation">&#123;</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> banji</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// super 代表父类的构造函数</span><span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>banji <span class="token operator">=</span> banji<span class="token punctuation">&#125;</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是学生'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'小吴'</span><span class="token punctuation">,</span> <span class="token string">'8班'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>name<span class="token punctuation">)</span>stu<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>共有的属性可以写在构造器外面</li><li>静态方法，挂载到类上，只有类可以访问</li><li><strong>set</strong> edit() 对某个属性设置值的方法，<strong>edit是个属性</strong></li><li><strong>get</strong> area() 对某个属性取值的方法，<strong>area是个属性</strong><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 长方形</span><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">&#123;</span><span class="token comment">// 共有的属性写在构造器外面</span>width <span class="token operator">=</span> <span class="token number">100</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">height</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">&#125;</span><span class="token comment">// 静态方法 挂载到类上，只有类可以访问</span><span class="token keyword">static</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是静态方法'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// set 对某个属性设置值的方法     edit 是对象的属性</span><span class="token keyword">set</span> <span class="token function">edit</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>wid<span class="token punctuation">,</span>hei<span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> wid<span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> hei<span class="token punctuation">&#125;</span><span class="token comment">// get 对某个属性获取值的方法     aear 是对象的属性</span><span class="token keyword">get</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> width<span class="token operator">*</span>height<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> rectangle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>Rectangle<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 类的静态方法，只有类可以访问</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rectangle<span class="token punctuation">.</span>area<span class="token punctuation">)</span>rectangle<span class="token punctuation">.</span>edit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="15-Module-模块"><a href="#15-Module-模块" class="headerlink" title="15. Module 模块"></a>15. Module 模块</h3><p>1.核心模块（node后端核心模块）<br>2.第三方模块<br>3.自定义模块</p><ul><li>第三方模块的语法<br>先执行<code>npm i 包名</code>下载模块<br>再用<code>import axios from &#39;axios&#39;</code>在组件中导入模块，这是默认导入</li><li>自定义模块的语法<br>1.默认导入导出<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> a<span class="token keyword">import</span> xxx <span class="token keyword">from</span> <span class="token string">'./about'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>2.命名导入导出<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token punctuation">&#123;</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>a <span class="token keyword">as</span> aa<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">&#125;</span> form <span class="token string">'./about'</span> <span class="token comment">// as 重命名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>3.默认和命名一起导入<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> x <span class="token keyword">from</span> <span class="token string">'./about'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>a<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>default<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>4.其他<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">'地址'</span>  <span class="token comment">// 执行一下模块</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="工具的使用"><a href="#工具的使用" class="headerlink" title="工具的使用"></a>工具的使用</h2><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><ul><li>搭建简易服务器</li><li>傻瓜化安装 node，就可以使用npm工具</li><li>利用 npm 工具 <code>npm i -g serve</code>  安装 serve 工具</li><li>执行<code>serve .</code></li></ul><h3 id="json-server"><a href="#json-server" class="headerlink" title="json-server"></a>json-server</h3><ul><li>利用 npm 工具<code>npm i -g json-server</code>安装json-server</li><li><code>json-server --version</code>检查版本</li><li>找到要执行的文件位置<code>json-server --watch -p 3008 文件名</code></li></ul><h3 id="day-js-插件"><a href="#day-js-插件" class="headerlink" title="day.js 插件"></a>day.js 插件</h3><ul><li>日期常用工具插件</li><li>day.js 和 moment.js</li></ul><h4 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h4><h5 id="dayjs-format-显示的格式设置"><a href="#dayjs-format-显示的格式设置" class="headerlink" title="dayjs.format() 显示的格式设置"></a>dayjs.format() 显示的格式设置</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token constant">YYYY</span><span class="token operator">-</span><span class="token constant">MM</span><span class="token operator">-</span><span class="token constant">DD</span> <span class="token constant">HH</span><span class="token operator">:</span>mm<span class="token operator">:</span>ss<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="显示时间戳"><a href="#显示时间戳" class="headerlink" title="显示时间戳"></a>显示时间戳</h5><p>1.Date.now() 通过内置对象 Date 获取当前时间戳<br>2.dayjs().unix() 秒时间戳<br>3.dayjs().valueOf() 毫秒时间戳</p><h2 id="lodash-克隆工具"><a href="#lodash-克隆工具" class="headerlink" title="lodash 克隆工具"></a>lodash 克隆工具</h2><p><code>import _ from &#39;lodash&#39;</code><br><strong>浅拷贝</strong>：只拷贝一层引用，深层次的引用类型共享内存地址。数组的地址换了，里面对象的地址没换</p><ul><li>_.clone()</li><li>Object.assign()</li><li>Array.prototype.slice()</li><li>Array.prototype.concat()<br><strong>深拷贝</strong>：拷贝多层引用，所有的引用地址都换成了新的。属性为对象时，深拷贝是新开栈，两个对象指向不同的地址</li><li>_.cloneDeep()</li><li>…扩展运算符</li><li>JSON.stringify() JSON.parse()</li><li>手写循环递归</li></ul><h2 id="阿里字体图标的导入"><a href="#阿里字体图标的导入" class="headerlink" title="阿里字体图标的导入"></a>阿里字体图标的导入</h2><ol><li>添加到项目</li></ol><ul><li>复制一下地址，link 引入，href属性 https:粘贴。新增元素后，链接要刷新换新的</li><li>给元素的 class 加 iconfont，以及图标下面的类</li></ul><ol start="2"><li>下载代码</li></ol><ul><li>单色字体图标将 .css 和 .ttf 复制到项目里，然后 link 引入 .css 文件。</li><li>多色字体图标将 .css 和 .js 复制到项目里，然后 link 引入 .css 文件。<br>vue 中，在 public 下的 index.html 模板中使用 link 引入。因为 iconfont 不需要编译，所以写在 public 里，src 里面的会被编译</li></ul><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul><li>少用退格键，多用CTRL + Z撤销</li><li>CTRL + &#x2F;  单行注释</li><li>CTRL + D 选中下一个一样的</li><li>CTRL + shift + D 复制当前行到下一行</li><li>CTRL + shift + ⬆️&#x2F;⬇️ 移动当前行</li><li>alt + 点击  可以选择多个光标位置</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 原生js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TS基础</title>
      <link href="/2025/05/01/TS/"/>
      <url>/2025/05/01/TS/</url>
      
        <content type="html"><![CDATA[<h3 id="TS"><a href="#TS" class="headerlink" title="TS"></a>TS</h3><p>TS 是基于 JS 的一种强类型声明语言。</p><h4 id="数据类型及其声明"><a href="#数据类型及其声明" class="headerlink" title="数据类型及其声明"></a>数据类型及其声明</h4><ul><li>数字</li><li>字符串</li><li>布尔值</li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> num<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">let</span> str<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token keyword">let</span> bool<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>数组</li><li>元组</li><li>枚举</li><li>any</li><li>void</li><li>null</li><li>undefined</li><li>never</li><li>object</li><li>symbol</li><li>类型断言</li><li>类型推断</li><li>类型别名</li><li>类型声明</li><li>接口</li><li>类</li><li>泛型</li></ul>]]></content>
      
      
      <categories>
          
          <category> TS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo</title>
      <link href="/2025/05/01/helloHexo/"/>
      <url>/2025/05/01/helloHexo/</url>
      
        <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/zh-cn/">Hexo官网</a></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Hexo手册 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
